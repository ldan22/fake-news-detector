[
  {
    "prompt": "If ?X is an instance of fire, then ?X has the attribute hot.",
    "completion": "(=> (instance ?X Fire) (attribute ?X Hot))"
  },
  {
    "prompt": "If ?X is an instance of music, then ?X has the attribute soothing.",
    "completion": "(=> (instance ?X Music) (attribute ?X Soothing))"
  },
  {
    "prompt": "If ?X is an instance of sugar, then ?X has the attribute sweet.",
    "completion": "(=> (instance ?X Sugar) (attribute ?X Sweet))"
  },
  {
    "prompt": "If ?X is an instance of knowledge, then ?X has the attribute powerful.",
    "completion": "(=> (instance ?X Knowledge) (attribute ?X Powerful))"
  },
  {
    "prompt": "If ?X is an instance of coffee, then ?X has the attribute addictive.",
    "completion": "(=> (instance ?X Coffee) (attribute ?X Addictive))"
  },
  {
    "prompt": "If ?X is an instance of laughter, then ?X has the attribute contagious.",
    "completion": "(=> (instance ?X Laughter) (attribute ?X Contagious))"
  },
  {
    "prompt": "If ?X is an instance of knowledge, then ?X has the attribute infinite.",
    "completion": "(=> (instance ?X Knowledge) (attribute ?X Infinite))"
  },
  {
    "prompt": "If ?X is an instance of love, then ?X has the attribute blind.",
    "completion": "(=> (instance ?X Love) (attribute ?X Blind))"
  },
  {
    "prompt": "If ?X is an instance of winter, then ?X has the attribute cold.",
    "completion": "(=> (instance ?X Winter) (attribute ?X Cold))"
  },
  {
    "prompt": "If ?X is an instance of sun, then ?X has the attribute bright.",
    "completion": "(=> (instance ?X Sun) (attribute ?X Bright))"
  },
  {
    "prompt": "If ?X is an instance of moon, then ?X has the attribute spherical.",
    "completion": "(=> (instance ?X Moon) (attribute ?X Spherical))"
  },
  {
    "prompt": "If ?X is an instance of piano, then ?X has the attribute musical.",
    "completion": "(=> (instance ?X Piano) (attribute ?X Musical))"
  },
  {
    "prompt": "If ?X is an instance of knife, then ?X has the attribute sharp.",
    "completion": "(=> (instance ?X Knife) (attribute ?X Sharp))"
  },
  {
    "prompt": "If ?X is an instance of diamond, then ?X has the attribute hard.",
    "completion": "(=> (instance ?X Diamond) (attribute ?X Hard))"
  },
  {
    "prompt": "If ?X is an instance of orange, then ?X has the attribute juicy.",
    "completion": "(=> (instance ?X Orange) (attribute ?X Juicy))"
  },
  {
    "prompt": "If ?X is an instance of honey, then ?X has the attribute sticky.",
    "completion": "(=> (instance ?X Honey) (attribute ?X Sticky))"
  },
  {
    "prompt": "If ?X is an instance of elephant, then ?X has the attribute big.",
    "completion": "(=> (instance ?X Elephant) (attribute ?X Big))"
  },
  {
    "prompt": "If ?X is an instance of snail, then ?X has the attribute slow.",
    "completion": "(=> (instance ?X Snail) (attribute ?X Slow))"
  },
  {
    "prompt": "If ?X is an instance of coffee, then ?X has the attribute hot.",
    "completion": "(=> (instance ?X Coffee) (attribute ?X Hot))"
  },
  {
    "prompt": "If ?X is an instance of spider, then ?X has the attribute creepy.",
    "completion": "(=> (instance ?X Spider) (attribute ?X Creepy))"
  },
  {
    "prompt": "If ?X is an instance of fat then ?X has attribute unhealthy",
    "completion": "(=> (instance ?F Fat) (attribute ?F Unhealthy))"
  },
  {
    "prompt": "If ?X is an instance of human, then ?X has attribute intelligent.",
    "completion": "(=> (instance ?X Human) (attribute ?X Intelligent))"
  },
  {
    "prompt": "If ?X is an instance of rose, then ?X has attribute red.",
    "completion": "(=> (instance ?X Rose) (attribute ?X Red))"
  },
  {
    "prompt": "If ?X is an instance of rainbow, then ?X has attribute beautiful.",
    "completion": "(=> (instance ?X Rainbow) (attribute ?X Beautiful))"
  },
  {
    "prompt": "If ?X is an instance of cactus, then ?X has the attribute prickly.",
    "completion": "(=> (instance ?X Cactus) (attribute ?X Prickly))"
  },
  {
    "prompt": "If ?X is an instance of strawberry, then ?X has the attribute sweet.",
    "completion": "(=> (instance ?X Strawberry) (attribute ?X Sweet))"
  },
  {
    "prompt": "If ?X is an instance of dolphin, then ?X has the attribute intelligent.",
    "completion": "(=> (instance ?X Dolphin) (attribute ?X Intelligent))"
  },
  {
    "prompt": "If ?X is an instance of chili, then ?X has the attribute spicy.",
    "completion": "(=> (instance ?X Chili) (attribute ?X Spicy))"
  },
  {
    "prompt": "If ?X is an instance of desert, then ?X has the attribute dry.",
    "completion": "(=> (instance ?X Desert) (attribute ?X Dry))"
  },
  {
    "prompt": "If ?X is an instance of winter, then ?X has the attribute cold.",
    "completion": "(=> (instance ?X Winter) (attribute ?X Cold))"
  },
  {
    "prompt": "If ?X is an instance of lion, then ?X has the attribute powerful.",
    "completion": "(=> (instance ?X Lion) (attribute ?X Powerful))"
  },
  {
    "prompt": "If ?X is an instance of chocolate, then ?X has the attribute delicious.",
    "completion": "(=> (instance ?X Chocolate) (attribute ?X Delicious))"
  },
  {
    "prompt": "If ?X is an instance of computer, then ?X has the attribute useful.",
    "completion": "(=> (instance ?X Computer) (attribute ?X Useful))"
  },
  {
    "prompt": "If ?X is an instance of mountain, then ?X has the attribute high.",
    "completion": "(=> (instance ?X Mountain) (attribute ?X High))"
  },
  {
    "prompt": "Exists an instance ?X of dog such that ?X has attribute aggressive.",
    "completion": "(exists (?X) (and (instance ?X Dog) (attribute ?X Aggressive)))"
  },
  {
    "prompt": "Exists an instance ?X of apple such that ?X has attribute sour.",
    "completion": "(exists (?X) (and (instance ?X Apple) (attribute ?X Sour)))"
  },
  {
    "prompt": "Exists an instance ?X of car such that ?X has attribute fast.",
    "completion": "(exists (?X) (and (instance ?X Car) (attribute ?X Fast)))"
  },
  {
    "prompt": "Exists an instance ?X of snake such that ?X has attribute poisonous.",
    "completion": "(exists (?X) (and (instance ?X Snake) (attribute ?X Poisonous)))"
  },
  {
    "prompt": "Exists an instance ?X of book such that ?X has attribute informative.",
    "completion": "(exists (?X) (and (instance ?X Book) (attribute ?X Informative)))"
  },
  {
    "prompt": "Exists an instance ?X of stone such that ?X has attribute shiny.",
    "completion": "(exists (?X) (and (instance ?X Stone) (attribute ?X Shiny)))"
  },
  {
    "prompt": "Exists an instance ?X of bird such that ?X has attribute colorful.",
    "completion": "(exists (?X) (and (instance ?X Bird) (attribute ?X Colorful)))"
  },
  {
    "prompt": "Exists an instance ?X of person such that ?X has attribute kind.",
    "completion": "(exists (?X) (and (instance ?X Person) (attribute ?X Kind)))"
  },
  {
    "prompt": "Exists an instance ?X of plant such that ?X has attribute medicinal.",
    "completion": "(exists (?X) (and (instance ?X Plant) (attribute ?X Medicinal)))"
  },
  {
    "prompt": "Exists an instance ?X of drink such that ?X has attribute refreshing.",
    "completion": "(exists (?X) (and (instance ?X Drink) (attribute ?X Refreshing)))"
  },
  {
    "prompt": "Exists an instance ?X of star such that ?X has attribute bright.",
    "completion": "(exists (?X) (and (instance ?X Star) (attribute ?X Bright)))"
  },
  {
    "prompt": "Exists an instance ?X of flower such that ?X has attribute fragrant.",
    "completion": "(exists (?X) (and (instance ?X Flower) (attribute ?X Fragrant)))"
  },
  {
    "prompt": "Exists an instance ?X of book such that ?X has attribute boring.",
    "completion": "(exists (?X) (and (instance ?X Book) (attribute ?X Boring)))"
  },
  {
    "prompt": "Exists an instance ?X of city such that ?X has attribute crowded.",
    "completion": "(exists (?X) (and (instance ?X City) (attribute ?X Crowded)))"
  },
  {
    "prompt": "Exists an instance ?X of movie such that ?X has attribute thrilling.",
    "completion": "(exists (?X) (and (instance ?X Movie) (attribute ?X Thrilling)))"
  },
  {
    "prompt": "Exists an instance ?X of guitar such that ?X has attribute expensive.",
    "completion": "(exists (?X) (and (instance ?X Guitar) (attribute ?X Expensive)))"
  },
  {
    "prompt": "Exists an instance ?X of fish such that ?X has attribute tiny.",
    "completion": "(exists (?X) (and (instance ?X Fish) (attribute ?X Tiny)))"
  },
  {
    "prompt": "Exists an instance ?X of bird such that ?X has attribute loud.",
    "completion": "(exists (?X) (and (instance ?X Bird) (attribute ?X Loud)))"
  },
  {
    "prompt": "Exists an instance ?X of tree such that ?X has attribute old.",
    "completion": "(exists (?X) (and (instance ?X Tree) (attribute ?X Old)))"
  },
  {
    "prompt": "Exists an instance ?X of phone such that ?X has attribute lightweight.",
    "completion": "(exists (?X) (and (instance ?X Phone) (attribute ?X Lightweight)))"
  },
  {
    "prompt": "Exists an instance ?X of dog such that ?X has attribute small.",
    "completion": "(exists (?X) (and (instance ?X Dog) (attribute ?X Small)))"
  },
  {
    "prompt": "Exists an instance ?X of planet such that ?X has attribute habitable.",
    "completion": "(exists (?X) (and (instance ?X Planet) (attribute ?X Habitable)))"
  },
  {
    "prompt": "Exists an instance ?X of drink such that ?X has attribute cold.",
    "completion": "(exists (?X) (and (instance ?X Drink) (attribute ?X Cold)))"
  },
  {
    "prompt": "Exists an instance ?X of building such that ?X has attribute tall.",
    "completion": "(exists (?X) (and (instance ?X Building) (attribute ?X Tall)))"
  },
  {
    "prompt": "Exists an instance ?X of river such that ?X has attribute long.",
    "completion": "(exists (?X) (and (instance ?X River) (attribute ?X Long)))"
  },
  {
    "prompt": "Exists an instance ?X of food such that ?X has attribute spicy.",
    "completion": "(exists (?X) (and (instance ?X Food) (attribute ?X Spicy)))"
  },
  {
    "prompt": "Exists an instance ?X of person such that ?X has attribute tall.",
    "completion": "(exists (?X) (and (instance ?X Person) (attribute ?X Tall)))"
  },
  {
    "prompt": "Exists an instance ?X of road such that ?X has attribute winding.",
    "completion": "(exists (?X) (and (instance ?X Road) (attribute ?X Winding)))"
  },
  {
    "prompt": "Exists an instance ?X of lake such that ?X has attribute deep.",
    "completion": "(exists (?X) (and (instance ?X Lake) (attribute ?X Deep)))"
  },
  {
    "prompt": "Exists an instance ?X of book such that ?X has attribute interesting.",
    "completion": "(exists (?X) (and (instance ?X Book) (attribute ?X Interesting)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of apple, then ?X has the attribute sweet.",
    "completion": "(forall (?X) (=> (instance ?X Apple) (attribute ?X Sweet)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of lemon, then ?X has the attribute sour.",
    "completion": "(forall (?X) (=> (instance ?X Lemon) (attribute ?X Sour)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of skyscraper, then ?X has the attribute tall.",
    "completion": "(forall (?X) (=> (instance ?X Skyscraper) (attribute ?X Tall)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of tiger, then ?X has the attribute striped.",
    "completion": "(forall (?X) (=> (instance ?X Tiger) (attribute ?X Striped)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of river, then ?X has the attribute flowing.",
    "completion": "(forall (?X) (=> (instance ?X River) (attribute ?X Flowing)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of piano, then ?X has the attribute musical.",
    "completion": "(forall (?X) (=> (instance ?X Piano) (attribute ?X Musical)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of snake, then ?X has the attribute slithering.",
    "completion": "(forall (?X) (=> (instance ?X Snake) (attribute ?X Slithering)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of rose, then ?X has the attribute fragrant.",
    "completion": "(forall (?X) (=> (instance ?X Rose) (attribute ?X Fragrant)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of desert, then ?X has the attribute hot.",
    "completion": "(forall (?X) (=> (instance ?X Desert) (attribute ?X Hot)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of ocean, then ?X has the attribute salty.",
    "completion": "(forall (?X) (=> (instance ?X Ocean) (attribute ?X Salty)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of meat, then ?X has the attribute high-in-protein.",
    "completion": "(forall (?X) (=> (instance ?X Meat) (attribute ?X HighInProtein)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of soda-drink, then ?X has the attribute high-in-sugar.",
    "completion": "(forall (?X) (=> (instance ?X SodaDrink) (attribute ?X HighInSugar)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of whole-grain, then ?X has the attribute high-in-fiber.",
    "completion": "(forall (?X) (=> (instance ?X WholeGrain) (attribute ?X HighInFiber)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of green-vegetable, then ?X has the attribute rich-in-vitamins.",
    "completion": "(forall (?X) (=> (instance ?X GreenVegetable) (attribute ?X RichInVitamins)))"
  },
  {
    "prompt": "Forall ?X, If ?X is an instance of fast-food, then ?X has the attribute high-in-calories.",
    "completion": "(forall (?X) (=> (instance ?X FastFood) (attribute ?X HighInCalories)))"
  },
  {
    "prompt": "Exists an instance ?X of fruit such that ?X has attribute high-in-fiber.",
    "completion": "(exists (?X) (and (instance ?X Fruit) (attribute ?X HighInFiber)))"
  },
  {
    "prompt": "Exists an instance ?X of vegetable such that ?X has attribute low-in-calories.",
    "completion": "(exists (?X) (and (instance ?X Vegetable) (attribute ?X LowInCalories)))"
  },
  {
    "prompt": "Exists an instance ?X of food such that ?X has attribute high-in-protein.",
    "completion": "(exists (?X) (and (instance ?X Food) (attribute ?X HighInProtein)))"
  },
  {
    "prompt": "Exists an instance ?X of diet such that ?X has attribute low-in-carbohydrates.",
    "completion": "(exists (?X) (and (instance ?X Diet) (attribute ?X LowInCarbohydrates)))"
  },
  {
    "prompt": "Exists an instance ?X of snack such that ?X has attribute high-in-sugar.",
    "completion": "(exists (?X) (and (instance ?X Snack) (attribute ?X HighInSugar)))"
  },
  {
    "prompt": "If ?X is an instance of meat, then ?X has the attribute high-in-protein.",
    "completion": "(=> (instance ?X Meat) (attribute ?X HighInProtein))"
  },
  {
    "prompt": "If ?X is an instance of soda-drink, then ?X has the attribute high-in-sugar.",
    "completion": "(=> (instance ?X SodaDrink) (attribute ?X HighInSugar))"
  },
  {
    "prompt": "If ?X is an instance of whole-grain, then ?X has the attribute high-in-fiber.",
    "completion": "(=> (instance ?X WholeGrain) (attribute ?X HighInFiber))"
  },
  {
    "prompt": "If ?X is an instance of green-vegetable, then ?X has the attribute rich-in-vitamins.",
    "completion": "(=> (instance ?X GreenVegetable) (attribute ?X RichInVitamins))"
  },
  {
    "prompt": "If ?X is an instance of fast-food, then ?X has the attribute high-in-calories.",
    "completion": "(=> (instance ?X FastFood) (attribute ?X HighInCalories))"
  },
  {
    "prompt": "Exists an instance ?X of fruit such that ?X has attribute high-in-fiber.",
    "completion": "(exists (?X) (and (instance ?X Fruit) (attribute ?X HighInFiber)))"
  },
  {
    "prompt": "Exists an instance ?X of vegetable such that ?X has attribute low-in-calories.",
    "completion": "(exists (?X) (and (instance ?X Vegetable) (attribute ?X LowInCalories)))"
  },
  {
    "prompt": "Exists an instance ?X of food such that ?X has attribute high-in-protein.",
    "completion": "(exists (?X) (and (instance ?X Food) (attribute ?X HighInProtein)))"
  },
  {
    "prompt": "Exists an instance ?X of diet such that ?X has attribute low-in-carbohydrates.",
    "completion": "(exists (?X) (and (instance ?X Diet) (attribute ?X LowInCarbohydrates)))"
  },
  {
    "prompt": "Exists an instance ?X of snack such that ?X has attribute high-in-sugar.",
    "completion": "(exists (?X) (and (instance ?X Snack) (attribute ?X HighInSugar)))"
  },
  {
    "prompt": "If ?X is an instance of apple, then ?X has the attribute healthy.",
    "completion": "(=> (instance ?X Apple) (attribute ?X Healthy))"
  },
  {
    "prompt": "If ?X is an instance of spinach, then ?X has the attribute healthy.",
    "completion": "(=> (instance ?X Spinach) (attribute ?X Healthy))"
  },
  {
    "prompt": "If ?X is an instance of oatmeal, then ?X has the attribute healthy.",
    "completion": "(=> (instance ?X Oatmeal) (attribute ?X Healthy))"
  },
  {
    "prompt": "If ?X is an instance of broccoli, then ?X has the attribute healthy.",
    "completion": "(=> (instance ?X Broccoli) (attribute ?X Healthy))"
  },
  {
    "prompt": "If ?X is an instance of blueberry, then ?X has the attribute healthy.",
    "completion": "(=> (instance ?X Blueberry) (attribute ?X Healthy))"
  },
  {
    "prompt": "If ?X is an instance of fast food, then ?X has the attribute unhealthy.",
    "completion": "(=> (instance ?X FastFood) (attribute ?X Unhealthy))"
  },
  {
    "prompt": "If ?X is an instance of chip, then ?X has the attribute unhealthy.",
    "completion": "(=> (instance ?X Chip) (attribute ?X Unhealthy))"
  },
  {
    "prompt": "If ?X is an instance of soda, then ?X has the attribute unhealthy.",
    "completion": "(=> (instance ?X Soda) (attribute ?X Unhealthy))"
  },
  {
    "prompt": "If ?X is an instance of candy, then ?X has the attribute unhealthy.",
    "completion": "(=> (instance ?X Candy) (attribute ?X Unhealthy))"
  },
  {
    "prompt": "If ?X is an instance of deep fried food, then ?X has the attribute high fat.",
    "completion": "(=> (instance ?X DeepFriedFood) (attribute ?X HighFat))"
  },
  {
    "prompt": "If ?X is an instance of butter, then ?X has the attribute high fat.",
    "completion": "(=> (instance ?X Butter) (attribute ?X HighFat))"
  },
  {
    "prompt": "If ?X is an instance of avocado, then ?X has the attribute high fat.",
    "completion": "(=> (instance ?X Avocado) (attribute ?X HighFat))"
  },
  {
    "prompt": "If ?X is an instance of chicken breast, then ?X has the attribute low fat.",
    "completion": "(=> (instance ?X ChickenBreast) (attribute ?X LowFat))"
  },
  {
    "prompt": "If ?X is an instance of tuna, then ?X has the attribute low fat.",
    "completion": "(=> (instance ?X Tuna) (attribute ?X LowFat))"
  },
  {
    "prompt": "If ?X is an instance of carrot, then ?X has the attribute nutritious.",
    "completion": "(=> (instance ?X Carrot) (attribute ?X Nutritious))"
  },
  {
    "prompt": "If ?X is an instance of almond, then ?X has the attribute nutritious.",
    "completion": "(=> (instance ?X Almond) (attribute ?X Nutritious))"
  },
  {
    "prompt": "If ?X is an instance of quinoa, then ?X has the attribute nutritious.",
    "completion": "(=> (instance ?X Quinoa) (attribute ?X Nutritious))"
  },
  {
    "prompt": "If ?X is an instance of egg, then ?X has the attribute nutritious.",
    "completion": "(=> (instance ?X Egg) (attribute ?X Nutritious))"
  },
  {
    "prompt": "If ?X is an instance of salmon, then ?X has the attribute nutritious.",
    "completion": "(=> (instance ?X Salmon) (attribute ?X Nutritious))"
  },
  {
    "prompt": "If ?X is an instance of fried chicken, then ?X has the attribute unhealthy.",
    "completion": "(=> (instance ?X FriedChicken) (attribute ?X Unhealthy))"
  },
  {
    "prompt": "If ?X is an instance of processed meat, then ?X has the attribute unhealthy.",
    "completion": "(=> (instance ?X ProcessedMeat) (attribute ?X Unhealthy))"
  },
  {
    "prompt": "If ?X is an instance of sausage, then ?X has the attribute unhealthy.",
    "completion": "(=> (instance ?X Sausage) (attribute ?X Unhealthy))"
  },
  {
    "prompt": "If ?X is an instance of ice cream, then ?X has the attribute unhealthy.",
    "completion": "(=> (instance ?X IceCream) (attribute ?X Unhealthy))"
  },
  {
    "prompt": "If ?X is an instance of doughnut, then ?X has the attribute unhealthy.",
    "completion": "(=> (instance ?X Doughnut) (attribute ?X Unhealthy))"
  },
  {
    "prompt": "If ?X is an instance of pork belly, then ?X has the attribute high fat.",
    "completion": "(=> (instance ?X PorkBelly) (attribute ?X HighFat))"
  },
  {
    "prompt": "If ?X is an instance of cheese, then ?X has the attribute high fat.",
    "completion": "(=> (instance ?X Cheese) (attribute ?X HighFat))"
  },
  {
    "prompt": "If ?X is an instance of fatty beef, then ?X has the attribute high fat.",
    "completion": "(=> (instance ?X FattyBeef) (attribute ?X HighFat))"
  },
  {
    "prompt": "If ?X is an instance of cream, then ?X has the attribute high fat.",
    "completion": "(=> (instance ?X Cream) (attribute ?X HighFat))"
  },
  {
    "prompt": "If ?X is an instance of coconut oil, then ?X has the attribute high fat.",
    "completion": "(=> (instance ?X CoconutOil) (attribute ?X HighFat))"
  },
  {
    "prompt": "If ?X is an instance of turkey, then ?X has the attribute low fat.",
    "completion": "(=> (instance ?X Turkey) (attribute ?X LowFat))"
  },
  {
    "prompt": "If ?X is an instance of skimmed milk, then ?X has the attribute low fat.",
    "completion": "(=> (instance ?X SkimmedMilk) (attribute ?X LowFat))"
  },
  {
    "prompt": "If ?X is an instance of rice cake, then ?X has the attribute low fat.",
    "completion": "(=> (instance ?X RiceCake) (attribute ?X LowFat))"
  },
  {
    "prompt": "If ?X is an instance of lean beef, then ?X has the attribute low fat.",
    "completion": "(=> (instance ?X LeanBeef) (attribute ?X LowFat))"
  },
  {
    "prompt": "If ?X is an instance of egg white, then ?X has the attribute low fat.",
    "completion": "(=> (instance ?X EggWhite) (attribute ?X LowFat))"
  },
  {
    "prompt": "If ?X is an instance of sweet potato, then ?X has the attribute nutritious.",
    "completion": "(=> (instance ?X SweetPotato) (attribute ?X Nutritious))"
  },
  {
    "prompt": "If ?X is an instance of brown rice, then ?X has the attribute nutritious.",
    "completion": "(=> (instance ?X BrownRice) (attribute ?X Nutritious))"
  },
  {
    "prompt": "If ?X is an instance of greek yogurt, then ?X has the attribute nutritious.",
    "completion": "(=> (instance ?X GreekYogurt) (attribute ?X Nutritious))"
  },
  {
    "prompt": "If ?X is an instance of kidney bean, then ?X has the attribute nutritious.",
    "completion": "(=> (instance ?X KidneyBean) (attribute ?X Nutritious))"
  },
  {
    "prompt": "If ?X is an instance of whole grain, then ?X has the attribute nutritious.",
    "completion": "(=> (instance ?X WholeGrain) (attribute ?X Nutritious))"
  },
  {
    "prompt": "If ?F is an instance of fruit and ?V is an instance of vegetable, then ?F has the attribute healthy and ?V has attribute healthy",
    "completion": "(=> (and (instance ?F Fruit) (instance ?V Vegetable)) (and (attribute ?F Healthy) (attribute ?V Healthy)))"
  },
  {
    "prompt": "If ?L is an instance of lion and ?T is an instance of tiger, then ?L has the attribute ferocious and ?T has attribute ferocious",
    "completion": "(=> (and (instance ?L Lion) (instance ?T Tiger)) (and (attribute ?L Ferocious) (attribute ?T Ferocious)))"
  },
  {
    "prompt": "If ?S is an instance of sunflower and ?D is an instance of daisy, then ?S has the attribute colorful and ?D has attribute colorful",
    "completion": "(=> (and (instance ?S Sunflower) (instance ?D Daisy)) (and (attribute ?S Colorful) (attribute ?D Colorful)))"
  },
  {
    "prompt": "If ?R is an instance of rabbit and ?D is an instance of deer, then ?R has the attribute swift and ?D has attribute swift",
    "completion": "(=> (and (instance ?R Rabbit) (instance ?D Deer)) (and (attribute ?R Swift) (attribute ?D Swift)))"
  },
  {
    "prompt": "If ?W is an instance of whale and ?D is an instance of dolphin, then ?W has the attribute intelligent and ?D has attribute intelligent",
    "completion": "(=> (and (instance ?W Whale) (instance ?D Dolphin)) (and (attribute ?W Intelligent) (attribute ?D Intelligent)))"
  },
  {
    "prompt": "If ?A is an instance of apple and ?O is an instance of orange, then ?A has the attribute nutritious and ?O has attribute nutritious",
    "completion": "(=> (and (instance ?A Apple) (instance ?O Orange)) (and (attribute ?A Nutritious) (attribute ?O Nutritious)))"
  },
  {
    "prompt": "If ?M is an instance of mountain and ?O is an instance of ocean, then ?M has the attribute majestic and ?O has attribute majestic",
    "completion": "(=> (and (instance ?M Mountain) (instance ?O Ocean)) (and (attribute ?M Majestic) (attribute ?O Majestic)))"
  },
  {
    "prompt": "If ?O is an instance of oak and ?M is an instance of maple, then ?O has the attribute tall and ?M has attribute tall",
    "completion": "(=> (and (instance ?O Oak) (instance ?M Maple)) (and (attribute ?O Tall) (attribute ?M Tall)))"
  },
  {
    "prompt": "If ?E is an instance of eagle and ?H is an instance of hawk, then ?E has the attribute powerful and ?H has attribute powerful",
    "completion": "(=> (and (instance ?E Eagle) (instance ?H Hawk)) (and (attribute ?E Powerful) (attribute ?H Powerful)))"
  },
  {
    "prompt": "If ?V is an instance of violin and ?C is an instance of cello, then ?V has the attribute melodious and ?C has attribute melodious",
    "completion": "(=> (and (instance ?V Violin) (instance ?C Cello)) (and (attribute ?V Melodious) (attribute ?C Melodious)))"
  },
  {
    "prompt": "If ?C is an instance of chili and ?P is an instance of pepper, then ?C has the attribute spicy and ?P has attribute spicy",
    "completion": "(=> (and (instance ?C Chili) (instance ?P Pepper)) (and (attribute ?C Spicy) (attribute ?P Spicy)))"
  },
  {
    "prompt": "If ?F is an instance of fruit, then ?F has the attribute nutritious and ?F has attribute healthy",
    "completion": "(=> (instance ?F Fruit) (and (attribute ?F Nutritious) (attribute ?F Healthy)))"
  },
  {
    "prompt": "If ?C is an instance of car, then ?C has the attribute fast and ?C has attribute convenient",
    "completion": "(=> (instance ?C Car) (and (attribute ?C Fast) (attribute ?C Convenient)))"
  },
  {
    "prompt": "If ?S is an instance of sunflower, then ?S has the attribute tall and ?S has attribute beautiful",
    "completion": "(=> (instance ?S Sunflower) (and (attribute ?S Tall) (attribute ?S Beautiful)))"
  },
  {
    "prompt": "If ?B is an instance of book, then ?B has the attribute informative and ?B has attribute entertaining",
    "completion": "(=> (instance ?B Book) (and (attribute ?B Informative) (attribute ?B Entertaining)))"
  },
  {
    "prompt": "If ?W is an instance of wolf, then ?W has the attribute wild and ?W has attribute ferocious",
    "completion": "(=> (instance ?W Wolf) (and (attribute ?W Wild) (attribute ?W Ferocious)))"
  },
  {
    "prompt": "If ?D is an instance of dolphin, then ?D has the attribute intelligent and ?D has attribute playful",
    "completion": "(=> (instance ?D Dolphin) (and (attribute ?D Intelligent) (attribute ?D Playful)))"
  },
  {
    "prompt": "If ?G is an instance of giraffe, then ?G has the attribute tall and ?G has attribute graceful",
    "completion": "(=> (instance ?G Giraffe) (and (attribute ?G Tall) (attribute ?G Graceful)))"
  },
  {
    "prompt": "If ?M is an instance of mountain, then ?M has the attribute majestic and ?M has attribute inspiring",
    "completion": "(=> (instance ?M Mountain) (and (attribute ?M Majestic) (attribute ?M Inspiring)))"
  },
  {
    "prompt": "If ?C is an instance of computer, then ?C has the attribute useful and ?C has attribute efficient",
    "completion": "(=> (instance ?C Computer) (and (attribute ?C Useful) (attribute ?C Efficient)))"
  },
  {
    "prompt": "If ?R is an instance of rose, then ?R has the attribute fragrant and ?R has attribute beautiful",
    "completion": "(=> (instance ?R Rose) (and (attribute ?R Fragrant) (attribute ?R Beautiful)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of fire, then ?X has the attribute hot.",
    "completion": "(forall (?X) (=> (instance ?X Fire) (attribute ?X Hot)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of music, then ?X has the attribute soothing.",
    "completion": "(forall (?X) (=> (instance ?X Music) (attribute ?X Soothing)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of sugar, then ?X has the attribute sweet.",
    "completion": "(forall (?X) (=> (instance ?X Sugar) (attribute ?X Sweet)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of knowledge, then ?X has the attribute powerful.",
    "completion": "(forall (?X) (=> (instance ?X Knowledge) (attribute ?X Powerful)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of coffee, then ?X has the attribute addictive.",
    "completion": "(forall (?X) (=> (instance ?X Coffee) (attribute ?X Addictive)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of laughter, then ?X has the attribute contagious.",
    "completion": "(forall (?X) (=> (instance ?X Laughter) (attribute ?X Contagious)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of desert, then ?X has the attribute dry.",
    "completion": "(forall (?X) (=> (instance ?X Desert) (attribute ?X Dry)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of winter, then ?X has the attribute cold.",
    "completion": "(forall (?X) (=> (instance ?X Winter) (attribute ?X Cold)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of lion, then ?X has the attribute powerful.",
    "completion": "(forall (?X) (=> (instance ?X Lion) (attribute ?X Powerful)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of chocolate, then ?X has the attribute delicious.",
    "completion": "(forall (?X) (=> (instance ?X Chocolate) (attribute ?X Delicious)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of computer, then ?X has the attribute useful.",
    "completion": "(forall (?X) (=> (instance ?X Computer) (attribute ?X Useful)))"
  },
  {
    "prompt": "For all ?X, If ?X is an instance of mountain, then ?X has the attribute high.",
    "completion": "(forall (?X) (=> (instance ?X Mountain) (attribute ?X High)))"
  },
  {
    "prompt": "If ?B is an instance of box, then there exists ?T such that ?T is an instance of toy and ?B spatially contains ?T.",
    "completion": "(=> (instance ?B Box) (exists (?T) (and (instance ?T Toy) (contains ?B ?T))))"
  },
  {
    "prompt": "If ?C is an instance of cupboard, then there exists ?D such that ?D is an instance of dish and ?C spatially contains ?D.",
    "completion": "(=> (instance ?C Cupboard) (exists (?D) (and (instance ?D Dish) (contains ?C ?D))))"
  },
  {
    "prompt": "If ?B is an instance of basket, then there exists ?F such that ?F is an instance of fruit and ?B spatially contains ?F.",
    "completion": "(=> (instance ?B Basket) (exists (?F) (and (instance ?F Fruit) (contains ?B ?F))))"
  },
  {
    "prompt": "If ?B is an instance of bag, then there exists ?Bk such that ?Bk is an instance of book and ?B spatially contains ?Bk.",
    "completion": "(=> (instance ?B Bag) (exists (?Bk) (and (instance ?Bk Book) (contains ?B ?Bk))))"
  },
  {
    "prompt": "If ?F is an instance of fridge, then there exists ?G such that ?G is an instance of grocery and ?F spatially contains ?G.",
    "completion": "(=> (instance ?F Fridge) (exists (?G) (and (instance ?G Grocery) (contains ?F ?G))))"
  },
  {
    "prompt": "If ?W is an instance of wardrobe, then there exists ?C such that ?C is an instance of clothing and ?W spatially contains ?C.",
    "completion": "(=> (instance ?W Wardrobe) (exists (?C) (and (instance ?C Clothing) (contains ?W ?C))))"
  },
  {
    "prompt": "If ?D is an instance of drawer, then there exists ?Dc such that ?Dc is an instance of document and ?D spatially contains ?Dc.",
    "completion": "(=> (instance ?D Drawer) (exists (?Dc) (and (instance ?Dc Document) (contains ?D ?Dc))))"
  },
  {
    "prompt": "If ?T is an instance of trunk, then there exists ?L such that ?L is an instance of luggage and ?T spatially contains ?L.",
    "completion": "(=> (instance ?T Trunk) (exists (?L) (and (instance ?L Luggage) (contains ?T ?L))))"
  },
  {
    "prompt": "If ?P is an instance of pocket, then there exists ?K such that ?K is an instance of key and ?P spatially contains ?K.",
    "completion": "(=> (instance ?P Pocket) (exists (?K) (and (instance ?K Key) (contains ?P ?K))))"
  },
  {
    "prompt": "If ?S is an instance of shelf, then there exists ?B such that ?B is an instance of book and ?S spatially contains ?B.",
    "completion": "(=> (instance ?S Shelf) (exists (?B) (and (instance ?B Book) (contains ?S ?B))))"
  },
  {
    "prompt": "If ?D is an instance of drawer, then there exists ?S such that ?S is an instance of sock and ?D spatially contains ?S.",
    "completion": "(=> (instance ?D Drawer) (exists (?S) (and (instance ?S Sock) (contains ?D ?S))))"
  },
  {
    "prompt": "If ?B is an instance of bag, then there exists ?L such that ?L is an instance of laptop and ?B spatially contains ?L.",
    "completion": "(=> (instance ?B Bag) (exists (?L) (and (instance ?L Laptop) (contains ?B ?L))))"
  },
  {
    "prompt": "If ?C is an instance of cupboard, then there exists ?P such that ?P is an instance of plate and ?C spatially contains ?P.",
    "completion": "(=> (instance ?C Cupboard) (exists (?P) (and (instance ?P Plate) (contains ?C ?P))))"
  },
  {
    "prompt": "If ?F is an instance of fridge, then there exists ?Bv such that ?Bv is an instance of beverage and ?F spatially contains ?Bv.",
    "completion": "(=> (instance ?F Fridge) (exists (?Bv) (and (instance ?Bv Beverage) (contains ?F ?Bv))))"
  },
  {
    "prompt": "If ?W is an instance of wardrobe, then there exists ?S such that ?S is an instance of shirt and ?W spatially contains ?S.",
    "completion": "(=> (instance ?W Wardrobe) (exists (?S) (and (instance ?S Shirt) (contains ?W ?S))))"
  },
  {
    "prompt": "If ?D is an instance of drawer, then there exists ?Pn such that ?Pn is an instance of pen and ?D spatially contains ?Pn.",
    "completion": "(=> (instance ?D Drawer) (exists (?Pn) (and (instance ?Pn Pen) (contains ?D ?Pn))))"
  },
  {
    "prompt": "If ?B is an instance of box, then there exists ?G such that ?G is an instance of gift and ?B spatially contains ?G.",
    "completion": "(=> (instance ?B Box) (exists (?G) (and (instance ?G Gift) (contains ?B ?G))))"
  },
  {
    "prompt": "If ?T is an instance of trunk, then there exists ?S such that ?S is an instance of suitcase and ?T spatially contains ?S.",
    "completion": "(=> (instance ?T Trunk) (exists (?S) (and (instance ?S Suitcase) (contains ?T ?S))))"
  },
  {
    "prompt": "If ?P is an instance of pocket, then there exists ?Wl such that ?Wl is an instance of wallet and ?P spatially contains ?Wl.",
    "completion": "(=> (instance ?P Pocket) (exists (?Wl) (and (instance ?Wl Wallet) (contains ?P ?Wl))))"
  },
  {
    "prompt": "If ?C is an instance of car, then there exists ?E such that ?E is an instance of engine and ?E is part of ?C.",
    "completion": "(=> (instance ?C Car) (exists (?E) (and (instance ?E Engine) (part ?E ?C))))"
  },
  {
    "prompt": "If ?C is an instance of computer, then there exists ?M such that ?M is an instance of motherboard and ?M is part of ?C.",
    "completion": "(=> (instance ?C Computer) (exists (?M) (and (instance ?M Motherboard) (part ?M ?C))))"
  },
  {
    "prompt": "If ?W is an instance of watch, then there exists ?M such that ?M is an instance of mechanism and ?M is part of ?W.",
    "completion": "(=> (instance ?W Watch) (exists (?M) (and (instance ?M Mechanism) (part ?M ?W))))"
  },
  {
    "prompt": "If ?H is an instance of house, then there exists ?R such that ?R is an instance of room and ?R is part of ?H.",
    "completion": "(=> (instance ?H House) (exists (?R) (and (instance ?R Room) (part ?R ?H))))"
  },
  {
    "prompt": "If ?B is an instance of bicycle, then there exists ?W such that ?W is an instance of wheels and ?W is part of ?B.",
    "completion": "(=> (instance ?B Bicycle) (exists (?W) (and (instance ?W Wheels) (part ?W ?B))))"
  },
  {
    "prompt": "If ?C is an instance of cake, then there exists ?L such that ?L is an instance of layers and ?L is part of ?C.",
    "completion": "(=> (instance ?C Cake) (exists (?L) (and (instance ?L Layers) (part ?L ?C))))"
  },
  {
    "prompt": "If ?T is an instance of tree, then there exists ?B such that ?B is an instance of branches and ?B is part of ?T.",
    "completion": "(=> (instance ?T Tree) (exists (?B) (and (instance ?B Branches) (part ?B ?T))))"
  },
  {
    "prompt": "If ?C is an instance of camera, then there exists ?L such that ?L is an instance of lens and ?L is part of ?C.",
    "completion": "(=> (instance ?C Camera) (exists (?L) (and (instance ?L Lens) (part ?L ?C))))"
  },
  {
    "prompt": "If ?N is an instance of necklace, then there exists ?P such that ?P is an instance of pendant and ?P is part of ?N.",
    "completion": "(=> (instance ?N Necklace) (exists (?P) (and (instance ?P Pendant) (part ?P ?N))))"
  },
  {
    "prompt": "If ?C is an instance of car, then there exists ?S such that ?S is an instance of seat and ?S is part of ?C.",
    "completion": "(=> (instance ?C Car) (exists (?S) (and (instance ?S Seat) (part ?S ?C))))"
  },
  {
    "prompt": "If ?P is an instance of phone, then there exists ?B such that ?B is an instance of battery and ?B is part of ?P.",
    "completion": "(=> (instance ?P Phone) (exists (?B) (and (instance ?B Battery) (part ?B ?P))))"
  },
  {
    "prompt": "If ?H is an instance of house, then there exists ?R such that ?R is an instance of roof and ?R is part of ?H.",
    "completion": "(=> (instance ?H House) (exists (?R) (and (instance ?R Roof) (part ?R ?H))))"
  },
  {
    "prompt": "If ?C is an instance of clock, then there exists ?M such that ?M is an instance of mechanism and ?M is part of ?C.",
    "completion": "(=> (instance ?C Clock) (exists (?M) (and (instance ?M Mechanism) (part ?M ?C))))"
  },
  {
    "prompt": "If ?G is an instance of guitar, then there exists ?S such that ?S is an instance of strings and ?S is part of ?G.",
    "completion": "(=> (instance ?G Guitar) (exists (?S) (and (instance ?S Strings) (part ?S ?G))))"
  },
  {
    "prompt": "If ?W is an instance of watch, then there exists ?D such that ?D is an instance of dial and ?D is part of ?W.",
    "completion": "(=> (instance ?W Watch) (exists (?D) (and (instance ?D Dial) (part ?D ?W))))"
  },
  {
    "prompt": "If ?C is an instance of chair, then there exists ?B such that ?B is an instance of backrest and ?B is part of ?C.",
    "completion": "(=> (instance ?C Chair) (exists (?B) (and (instance ?B Backrest) (part ?B ?C))))"
  },
  {
    "prompt": "If ?V is an instance of vase, then there exists ?F such that ?F is an instance of flowers and ?F is part of ?V.",
    "completion": "(=> (instance ?V Vase) (exists (?F) (and (instance ?F Flowers) (part ?F ?V))))"
  },
  {
    "prompt": "If ?B is an instance of book, then there exists ?P such that ?P is an instance of pages and ?P is part of ?B.",
    "completion": "(=> (instance ?B Book) (exists (?P) (and (instance ?P Pages) (part ?P ?B))))"
  },
  {
    "prompt": "If ?S is an instance of suitcase, then there exists ?H such that ?H is an instance of handle and ?H is part of ?S.",
    "completion": "(=> (instance ?S Suitcase) (exists (?H) (and (instance ?H Handle) (part ?H ?S))))"
  },
  {
    "prompt": "If ?L is an instance of lamp, then there exists ?B such that ?B is an instance of bulb and ?B is part of ?L.",
    "completion": "(=> (instance ?L Lamp) (exists (?B) (and (instance ?B Bulb) (part ?B ?L))))"
  },
  {
    "prompt": "If ?P is an instance of phone, then there exists ?S such that ?S is an instance of screen and ?S is part of ?P.",
    "completion": "(=> (instance ?P Phone) (exists (?S) (and (instance ?S Screen) (part ?S ?P))))"
  },
  {
    "prompt": "If ?B is an instance of building, then there exists ?W such that ?W is an instance of window and ?W is part of ?B.",
    "completion": "(=> (instance ?B Building) (exists (?W) (and (instance ?W Window) (part ?W ?B))))"
  },
  {
    "prompt": "If ?C is an instance of car, then there exists ?E such that ?E is an instance of engine and ?E is part of ?C.",
    "completion": "(=> (instance ?C Car) (exists (?E) (and (instance ?E Engine) (part ?E ?C))))"
  },
  {
    "prompt": "If ?W is an instance of watch, then there exists ?D such that ?D is an instance of dial and ?D is part of ?W.",
    "completion": "(=> (instance ?W Watch) (exists (?D) (and (instance ?D Dial) (part ?D ?W))))"
  },
  {
    "prompt": "If ?C is an instance of computer, then there exists ?M such that ?M is an instance of motherboard and ?M is part of ?C.",
    "completion": "(=> (instance ?C Computer) (exists (?M) (and (instance ?M Motherboard) (part ?M ?C))))"
  },
  {
    "prompt": "If ?P is an instance of pen, then there exists ?I such that ?I is an instance of ink and ?I is part of ?P.",
    "completion": "(=> (instance ?P Pen) (exists (?I) (and (instance ?I Ink) (part ?I ?P))))"
  },
  {
    "prompt": "If ?C is an instance of camera, then there exists ?L such that ?L is an instance of lens and ?L is part of ?C.",
    "completion": "(=> (instance ?C Camera) (exists (?L) (and (instance ?L Lens) (part ?L ?C))))"
  },
  {
    "prompt": "If ?P is an instance of piano, then there exists ?K such that ?K is an instance of keys and ?K is part of ?P.",
    "completion": "(=> (instance ?P Piano) (exists (?K) (and (instance ?K Keys) (part ?K ?P))))"
  },
  {
    "prompt": "If ?B is an instance of bike, then there exists ?P such that ?P is an instance of pedals and ?P is part of ?B.",
    "completion": "(=> (instance ?B Bike) (exists (?P) (and (instance ?P Pedals) (part ?P ?B))))"
  },
  {
    "prompt": "If ?R is an instance of refrigerator, then there exists ?S such that ?S is an instance of shelves and ?S is part of ?R.",
    "completion": "(=> (instance ?R Refrigerator) (exists (?S) (and (instance ?S Shelves) (part ?S ?R))))"
  },
  {
    "prompt": "If ?C is an instance of computer, then there exist ?P, ?H, and ?M such that ?P is an instance of processor, ?H is an instance of hard drive, ?M is an instance of monitor and ?P, ?H, and ?M are parts of ?C.",
    "completion": "(=> (instance ?C Computer) (exists (?P ?H ?M) (and (instance ?P Processor) (instance ?H HardDrive) (instance ?M Monitor) (part ?P ?C) (part ?H ?C) (part ?M ?C))))"
  },
  {
    "prompt": "If ?C is an instance of car, then there exist ?E, ?W, and ?S such that ?E is an instance of engine, ?W is an instance of wheel, ?S is an instance of steering wheel and ?E, ?W, and ?S are parts of ?C.",
    "completion": "(=> (instance ?C Car) (exists (?E ?W ?S) (and (instance ?E Engine) (instance ?W Wheel) (instance ?S SteeringWheel) (part ?E ?C) (part ?W ?C) (part ?S ?C))))"
  },
  {
    "prompt": "If ?B is an instance of bicycle, then there exist ?P, ?S, and ?H such that ?P is an instance of pedal, ?S is an instance of saddle, ?H is an instance of handlebar and ?P, ?S, and ?H are parts of ?B.",
    "completion": "(=> (instance ?B Bicycle) (exists (?P ?S ?H) (and (instance ?P Pedal) (instance ?S Saddle) (instance ?H Handlebar) (part ?P ?B) (part ?S ?B) (part ?H ?B))))"
  },
  {
    "prompt": "If ?P is an instance of pizza, then there exist ?D, ?T, and ?C such that ?D is an instance of dough, ?T is an instance of tomato sauce, ?C is an instance of cheese and ?D, ?T, and ?C are parts of ?P.",
    "completion": "(=> (instance ?P Pizza) (exists (?D ?T ?C) (and (instance ?D Dough) (instance ?T TomatoSauce) (instance ?C Cheese) (part ?D ?P) (part ?T ?P) (part ?C ?P))))"
  },
  {
    "prompt": "If ?H is an instance of house, then there exist ?K, ?B, and ?L such that ?K is an instance of kitchen, ?B is an instance of bathroom, ?L is an instance of living room and ?K, ?B, and ?L are parts of ?H.",
    "completion": "(=> (instance ?H House) (exists (?K ?B ?L) (and (instance ?K Kitchen) (instance ?B Bathroom) (instance ?L LivingRoom) (part ?K ?H) (part ?B ?H) (part ?L ?H))))"
  },
  {
    "prompt": "If ?B is an instance of book, then there exist ?C, ?P, and ?S such that ?C is an instance of cover, ?P is an instance of page, ?S is an instance of spine and ?C, ?P, and ?S are parts of ?B.",
    "completion": "(=> (instance ?B Book) (exists (?C ?P ?S) (and (instance ?C Cover) (instance ?P Page) (instance ?S Spine) (part ?C ?B) (part ?P ?B) (part ?S ?B))))"
  },
  {
    "prompt": "If ?T is an instance of tree, then there exist ?Tr, ?B, and ?L such that ?Tr is an instance of trunk, ?B is an instance of branch, ?L is an instance of leaf and ?Tr, ?B, and ?L are parts of ?T.",
    "completion": "(=> (instance ?T Tree) (exists (?Tr ?B ?L) (and (instance ?Tr Trunk) (instance ?B Branch) (instance ?L Leaf) (part ?Tr ?T) (part ?B ?T) (part ?L ?T))))"
  },
  {
    "prompt": "If ?H is an instance of human body, then there exist ?He, ?L, and ?B such that ?He is an instance of heart, ?L is an instance of lung, ?B is an instance of brain and ?He, ?L, and ?B are parts of ?H.",
    "completion": "(=> (instance ?H HumanBody) (exists (?He ?L ?B) (and (instance ?He Heart) (instance ?L Lung) (instance ?B Brain) (part ?He ?H) (part ?L ?H) (part ?B ?H))))"
  },
  {
    "prompt": "If ?B is an instance of bird, then there exist ?Be, ?F, and ?W such that ?Be is an instance of beak, ?F is an instance of feather, ?W is an instance of wing and ?Be, ?F, and ?W are parts of ?B.",
    "completion": "(=> (instance ?B Bird) (exists (?Be ?F ?W) (and (instance ?Be Beak) (instance ?F Feather) (instance ?W Wing) (part ?Be ?B) (part ?F ?B) (part ?W ?B))))"
  },
  {
    "prompt": "If ?C is an instance of cell phone, then there exist ?S, ?Bu, and ?Ba such that ?S is an instance of screen, ?Bu is an instance of button, ?Ba is an instance of battery and ?S, ?Bu, and ?Ba are parts of ?C.",
    "completion": "(=> (instance ?C CellPhone) (exists (?S ?Bu ?Ba) (and (instance ?S Screen) (instance ?Bu Button) (instance ?Ba Battery) (part ?S ?C) (part ?Bu ?C) (part ?Ba ?C))))"
  },
  {
    "prompt": "If ?C is an instance of car and ?M is an instance of motorcycle, then there exists ?W such that ?W is an instance of wheel and ?W is part of both ?C and ?M.",
    "completion": "(=> (and (instance ?C Car) (instance ?M Motorcycle)) (exists (?W) (and (instance ?W Wheel) (part ?W ?C) (part ?W ?M))))"
  },
  {
    "prompt": "If ?B is an instance of book and ?M is an instance of magazine, then there exists ?P such that ?P is an instance of page and ?P is part of both ?B and ?M.",
    "completion": "(=> (and (instance ?B Book) (instance ?M Magazine)) (exists (?P) (and (instance ?P Page) (part ?P ?B) (part ?P ?M))))"
  },
  {
    "prompt": "If ?H is an instance of house and ?A is an instance of apartment, then there exists ?D such that ?D is an instance of door and ?D is part of both ?H and ?A.",
    "completion": "(=> (and (instance ?H House) (instance ?A Apartment)) (exists (?D) (and (instance ?D Door) (part ?D ?H) (part ?D ?A))))"
  },
  {
    "prompt": "If ?S is an instance of smartphone and ?T is an instance of tablet, then there exists ?Sc such that ?Sc is an instance of screen and ?Sc is part of both ?S and ?T.",
    "completion": "(=> (and (instance ?S Smartphone) (instance ?T Tablet)) (exists (?Sc) (and (instance ?Sc Screen) (part ?Sc ?S) (part ?Sc ?T))))"
  },
  {
    "prompt": "If ?Sh is an instance of shirt and ?J is an instance of jacket, then there exists ?B such that ?B is an instance of button and ?B is part of both ?Sh and ?J.",
    "completion": "(=> (and (instance ?Sh Shirt) (instance ?J Jacket)) (exists (?B) (and (instance ?B Button) (part ?B ?Sh) (part ?B ?J))))"
  },
  {
    "prompt": "If ?D is an instance of desk and ?T is an instance of table, then there exists ?L such that ?L is an instance of leg and ?L is part of both ?D and ?T.",
    "completion": "(=> (and (instance ?D Desk) (instance ?T Table)) (exists (?L) (and (instance ?L Leg) (part ?L ?D) (part ?L ?T))))"
  },
  {
    "prompt": "If ?F is an instance of fruit and ?V is an instance of vegetable, then there exists ?Vi such that ?Vi is an instance of vitamin and ?Vi is part of both ?F and ?V.",
    "completion": "(=> (and (instance ?F Fruit) (instance ?V Vegetable)) (exists (?Vi) (and (instance ?Vi Vitamin) (part ?Vi ?F) (part ?Vi ?V))))"
  },
  {
    "prompt": "If ?Pe is an instance of pen and ?Pi is an instance of pencil, then there exists ?Po such that ?Po is an instance of point and ?Po is part of both ?Pe and ?Pi.",
    "completion": "(=> (and (instance ?Pe Pen) (instance ?Pi Pencil)) (exists (?Po) (and (instance ?Po Point) (part ?Po ?Pe) (part ?Po ?Pi))))"
  },
  {
    "prompt": "If ?B is an instance of bird and ?A is an instance of airplane, then there exists ?W such that ?W is an instance of wing and ?W is part of both ?B and ?A.",
    "completion": "(=> (and (instance ?B Bird) (instance ?A Airplane)) (exists (?W) (and (instance ?W Wing) (part ?W ?B) (part ?W ?A))))"
  },
  {
    "prompt": "If ?T is an instance of tree and ?F is an instance of flower, then there exists ?R such that ?R is an instance of root and ?R is part of both ?T and ?F.",
    "completion": "(=> (and (instance ?T Tree) (instance ?F Flower)) (exists (?R) (and (instance ?R Root) (part ?R ?T) (part ?R ?F))))"
  },
  {
    "prompt": "Exists ?T, ?E, ?S such that ?T is an instance of teacher and ?E is an instance of education and ?S is an instance of student and ?T is the agent of ?E and ?S is the patient of ?E",
    "completion": "(exists (?T ?E ?S) (and (instance ?T Teacher) (instance ?E Educating) (instance ?S Student) (agent ?E ?T) (patient ?E ?S)))"
  },
  {
    "prompt": "Exists ?D, ?T, ?P such that ?D is an instance of doctor and ?T is an instance of treating and ?P is an instance of patient and ?D is the agent of ?T and ?P is the patient of ?T",
    "completion": "(exists (?D ?T ?P) (and (instance ?D Doctor) (instance ?T Treating) (instance ?P Patient) (agent ?T ?D) (patient ?T ?P)))"
  },
  {
    "prompt": "Exists ?A, ?C, ?W such that ?A is an instance of artist and ?C is an instance of creating and ?W is an instance of artwork and ?A is the agent of ?C and ?W is the patient of ?C",
    "completion": "(exists (?A ?C ?W) (and (instance ?A Artist) (instance ?C Creating) (instance ?W Artwork) (agent ?C ?A) (patient ?C ?W)))"
  },
  {
    "prompt": "Exists ?C, ?H, ?M such that ?C is an instance of cat and ?H is an instance of chasing and ?M is an instance of mouse and ?C is the agent of ?H and ?M is the patient of ?H",
    "completion": "(exists (?C ?H ?M) (and (instance ?C Cat) (instance ?H Chasing) (instance ?M Mouse) (agent ?H ?C) (patient ?H ?M)))"
  },
  {
    "prompt": "Exists ?C, ?K, ?F such that ?C is an instance of chef and ?K is an instance of cooking and ?F is an instance of food and ?C is the agent of ?K and ?F is the patient of ?K",
    "completion": "(exists (?C ?K ?F) (and (instance ?C Chef) (instance ?K Cooking) (instance ?F Food) (agent ?K ?C) (patient ?K ?F)))"
  },
  {
    "prompt": "Exists ?A, ?W, ?B such that ?A is an instance of author and ?W is an instance of writing and ?B is an instance of book and ?A is the agent of ?W and ?B is the patient of ?W",
    "completion": "(exists (?A ?W ?B) (and (instance ?A Author) (instance ?W Writing) (instance ?B Book) (agent ?W ?A) (patient ?W ?B)))"
  },
  {
    "prompt": "Exists ?F, ?G, ?C such that ?F is an instance of farmer and ?G is an instance of growing and ?C is an instance of crop and ?F is the agent of ?G and ?C is the patient of ?G",
    "completion": "(exists (?F ?G ?C) (and (instance ?F Farmer) (instance ?G Growing) (instance ?C Crop) (agent ?G ?F) (patient ?G ?C)))"
  },
  {
    "prompt": "Exists ?T, ?R, ?G such that ?T is an instance of truck and ?R is an instance of transporting and ?G is an instance of goods and ?T is the agent of ?R and ?G is the patient of ?R",
    "completion": "(exists (?T ?R ?G) (and (instance ?T Truck) (instance ?R Transporting) (instance ?G Goods) (agent ?R ?T) (patient ?R ?G)))"
  },
  {
    "prompt": "Exists ?M, ?P, ?I such that ?M is an instance of musician and ?P is an instance of playing and ?I is an instance of instrument and ?M is the agent of ?P and ?I is the patient of ?P",
    "completion": "(exists (?M ?P ?I) (and (instance ?M Musician) (instance ?P Playing) (instance ?I Instrument) (agent ?P ?M) (patient ?P ?I)))"
  },
  {
    "prompt": "Exists ?C, ?B, ?H such that ?C is an instance of carpenter and ?B is an instance of building and ?H is an instance of house and ?C is the agent of ?B and ?H is the patient of ?B",
    "completion": "(exists (?C ?B ?H) (and (instance ?C Carpenter) (instance ?B Building) (instance ?H House) (agent ?B ?C) (patient ?B ?H)))"
  },
  {
    "prompt": "Exists ?R, ?S-1, ?S-2 such that ?R is an instance of researcher and ?S-1 is an instance of studying and ?S-2 is an instance of subject and ?R is the agent of ?S-1 and ?S-2 is the patient of ?S-1",
    "completion": "(exists (?R ?S-1 ?S-2) (and (instance ?R Researcher) (instance ?S-1 Studying) (instance ?S-2 Subject) (agent ?S-1 ?R) (patient ?S-1 ?S-2)))"
  },
  {
    "prompt": "Exists ?S-1, ?S-2, ?S-3 such that ?S-1 is an instance of singer and ?S-2 is an instance of singing and ?S-3 is an instance of song and ?S-1 is the agent of ?S-2 and ?S-3 is the patient of ?S-2",
    "completion": "(exists (?S-1 ?S-2 ?S-3) (and (instance ?S-1 Singer) (instance ?S-2 Singing) (instance ?S-3 Song) (agent ?S-2 ?S-1) (patient ?S-2 ?S-3)))"
  },
  {
    "prompt": "Exists ?D, ?C-1, ?C-2 such that ?D is an instance of dog and ?C-1 is an instance of chasing and ?C-2 is an instance of cat and ?D is the agent of ?C-1 and ?C-2 is the patient of ?C-1",
    "completion": "(exists (?D ?C-1 ?C-2) (and (instance ?D Dog) (instance ?C-1 Chasing) (instance ?C-2 Cat) (agent ?C-1 ?D) (patient ?C-1 ?C-2)))"
  },
  {
    "prompt": "Exists ?A, ?P-1, ?P-2 such that ?A is an instance of actor and ?P-1 is an instance of performing and ?P-2 is an instance of play and ?A is the agent of ?P-1 and ?P-2 is the patient of ?P-1",
    "completion": "(exists (?A ?P-1 ?P-2) (and (instance ?A Actor) (instance ?P-1 Performing) (instance ?P-2 Play) (agent ?P-1 ?A) (patient ?P-1 ?P-2)))"
  },
  {
    "prompt": "Exists ?B, ?E, ?W such that ?B is an instance of bird and ?E is an instance of eating and ?W is an instance of worm and ?B is the agent of ?E and ?W is the patient of ?E",
    "completion": "(exists (?B ?E ?W) (and (instance ?B Bird) (instance ?E Eating) (instance ?W Worm) (agent ?E ?B) (patient ?E ?W)))"
  },
  {
    "prompt": "Exists ?E, ?D, ?M such that ?E is an instance of engineer and ?D is an instance of designing and ?M is an instance of machine and ?E is the agent of ?D and ?M is the patient of ?D",
    "completion": "(exists (?E ?D ?M) (and (instance ?E Engineer) (instance ?D Designing) (instance ?M Machine) (agent ?D ?E) (patient ?D ?M)))"
  },
  {
    "prompt": "Exists ?C, ?W, ?S such that ?C is an instance of coder and ?W is an instance of writing and ?S is an instance of software and ?C is the agent of ?W and ?S is the patient of ?W",
    "completion": "(exists (?C ?W ?S) (and (instance ?C Coder) (instance ?W Writing) (instance ?S Software) (agent ?W ?C) (patient ?W ?S)))"
  },
  {
    "prompt": "Exists ?A, ?C-1, ?C-2 such that ?A is an instance of animator and ?C-1 is an instance of creating and ?C-2 is an instance of character and ?A is the agent of ?C-1 and ?C-2 is the patient of ?C-1",
    "completion": "(exists (?A ?C-1 ?C-2) (and (instance ?A Animator) (instance ?C-1 Creating) (instance ?C-2 Character) (agent ?C-1 ?A) (patient ?C-1 ?C-2)))"
  },
  {
    "prompt": "Exists ?F-1, ?C, ?F-2 such that ?F-1 is an instance of fisherman and ?C is an instance of catching and ?F-2 is an instance of fish and ?F-1 is the agent of ?C and ?F-2 is the patient of ?C",
    "completion": "(exists (?F-1 ?C ?F-2) (and (instance ?F-1 Fisherman) (instance ?C Catching) (instance ?F-2 Fish) (agent ?C ?F-1) (patient ?C ?F-2)))"
  },
  {
    "prompt": "Exists ?G, ?P, ?T such that ?G is an instance of gardener and ?P is an instance of planting and ?T is an instance of tree and ?G is the agent of ?P and ?T is the patient of ?P",
    "completion": "(exists (?G ?P ?T) (and (instance ?G Gardener) (instance ?P Planting) (instance ?T Tree) (agent ?P ?G) (patient ?P ?T)))"
  },
  {
    "prompt": "Exists ?S, ?D, ?E such that ?S is an instance of scientist and ?D is an instance of discovering and ?E is an instance of element and ?S is the agent of ?D and ?E is the patient of ?D",
    "completion": "(exists (?S ?D ?E) (and (instance ?S Scientist) (instance ?D Discovering) (instance ?E Element) (agent ?D ?S) (patient ?D ?E)))"
  },
  {
    "prompt": "Exists ?I, ?T, ?S such that ?I is an instance of instructor and ?T is an instance of teaching and ?S is an instance of student and ?I is the agent of ?T and ?S is the patient of ?T",
    "completion": "(exists (?I ?T ?S) (and (instance ?I Instructor) (instance ?T Teaching) (instance ?S Student) (agent ?T ?I) (patient ?T ?S)))"
  },
  {
    "prompt": "Exists ?B-1, ?B-2, ?B-3 such that ?B-1 is an instance of baker and ?B-2 is an instance of baking and ?B-3 is an instance of bread and ?B-1 is the agent of ?B-2 and ?B-3 is the patient of ?B-2",
    "completion": "(exists (?B-1 ?B-2 ?B-3) (and (instance ?B-1 Baker) (instance ?B-2 Baking) (instance ?B-3 Bread) (agent ?B-2 ?B-1) (patient ?B-2 ?B-3)))"
  },
  {
    "prompt": "Exists ?P-1, ?P-2, ?P-3 such that ?P-1 is an instance of painter and ?P-2 is an instance of painting and ?P-3 is an instance of picture and ?P-1 is the agent of ?P-2 and ?P-3 is the patient of ?P-2",
    "completion": "(exists (?P-1 ?P-2 ?P-3) (and (instance ?P-1 Painter) (instance ?P-2 Painting) (instance ?P-3 Picture) (agent ?P-2 ?P-1) (patient ?P-2 ?P-3)))"
  },
  {
    "prompt": "Exists ?C-1, ?C-2, ?M such that ?C-1 is an instance of chef and ?C-2 is an instance of cooking and ?M is an instance of meal and ?C-1 is the agent of ?C-2 and ?M is the patient of ?C-2",
    "completion": "(exists (?C-1 ?C-2 ?M) (and (instance ?C-1 Chef) (instance ?C-2 Cooking) (instance ?M Meal) (agent ?C-2 ?C-1) (patient ?C-2 ?M)))"
  },
  {
    "prompt": "Exists ?L, ?H, ?Z such that ?L is an instance of lion and ?H is an instance of hunting and ?Z is an instance of zebra and ?L is the agent of ?H and ?Z is the patient of ?H",
    "completion": "(exists (?L ?H ?Z) (and (instance ?L Lion) (instance ?H Hunting) (instance ?Z Zebra) (agent ?H ?L) (patient ?H ?Z)))"
  },
  {
    "prompt": "Exists ?M, ?P, ?D such that ?M is an instance of machine and ?P is an instance of processing and ?D is an instance of data and ?M is the agent of ?P and ?D is the patient of ?P",
    "completion": "(exists (?M ?P ?D) (and (instance ?M Machine) (instance ?P Processing) (instance ?D Data) (agent ?P ?M) (patient ?P ?D)))"
  },
  {
    "prompt": "Exists ?A, ?P, ?S such that ?A is an instance of athlete and ?P is an instance of playing and ?S is an instance of sport and ?A is the agent of ?P and ?S is the patient of ?P",
    "completion": "(exists (?A ?P ?S) (and (instance ?A Athlete) (instance ?P Playing) (instance ?S Sport) (agent ?P ?A) (patient ?P ?S)))"
  },
  {
    "prompt": "Exists ?P-1, ?T, ?P-2 such that ?P-1 is an instance of photographer and ?T is an instance of taking and ?P-2 is an instance of photo and ?P-1 is the agent of ?T and ?P-2 is the patient of ?T",
    "completion": "(exists (?P-1 ?T ?P-2) (and (instance ?P-1 Photographer) (instance ?T Taking) (instance ?P-2 Photo) (agent ?T ?P-1) (patient ?T ?P-2)))"
  },
  {
    "prompt": "Exists ?D, ?D-1, ?C such that ?D is an instance of driver and ?D-1 is an instance of driving and ?C is an instance of car and ?D is the agent of ?D-1 and ?C is the patient of ?D-1",
    "completion": "(exists (?D ?D-1 ?C) (and (instance ?D Driver) (instance ?D-1 Driving) (instance ?C Car) (agent ?D-1 ?D) (patient ?D-1 ?C)))"
  },
  {
    "prompt": "Exists ?P-1, ?P-2, ?D such that ?P-1 is an instance of printer and ?P-2 is an instance of printing and ?D is an instance of document and ?P-1 is the agent of ?P-2 and ?D is the patient of ?P-2",
    "completion": "(exists (?P-1 ?P-2 ?D) (and (instance ?P-1 Printer) (instance ?P-2 Printing) (instance ?D Document) (agent ?P-2 ?P-1) (patient ?P-2 ?D)))"
  },
  {
    "prompt": "Exists ?T, ?G, ?P such that ?T is an instance of teacher and ?G is an instance of grading and ?P is an instance of paper and ?T is the agent of ?G and ?P is the patient of ?G",
    "completion": "(exists (?T ?G ?P) (and (instance ?T Teacher) (instance ?G Grading) (instance ?P Paper) (agent ?G ?T) (patient ?G ?P)))"
  },
  {
    "prompt": "Exists ?S-1, ?S-2, ?W such that ?S-1 is an instance of spider and ?S-2 is an instance of spinning and ?W is an instance of web and ?S-1 is the agent of ?S-2 and ?W is the patient of ?S-2",
    "completion": "(exists (?S-1 ?S-2 ?W) (and (instance ?S-1 Spider) (instance ?S-2 Spinning) (instance ?W Web) (agent ?S-2 ?S-1) (patient ?S-2 ?W)))"
  },
  {
    "prompt": "Exists ?D, ?P, ?M such that ?D is an instance of doctor and ?P is an instance of prescribing and ?M is an instance of medicine and ?D is the agent of ?P and ?M is the patient of ?P",
    "completion": "(exists (?D ?P ?M) (and (instance ?D Doctor) (instance ?P Prescribing) (instance ?M Medicine) (agent ?P ?D) (patient ?P ?M)))"
  },
  {
    "prompt": "Exists ?B-1, ?B-2, ?N such that ?B-1 is an instance of bird and ?B-2 is an instance of building and ?N is an instance of nest and ?B-1 is the agent of ?B-2 and ?N is the patient of ?B-2",
    "completion": "(exists (?B-1 ?B-2 ?N) (and (instance ?B-1 Bird) (instance ?B-2 Building) (instance ?N Nest) (agent ?B-2 ?B-1) (patient ?B-2 ?N)))"
  },
  {
    "prompt": "Exists ?A, ?S, ?M such that ?A is an instance of artist and ?S is an instance of sketching and ?M is an instance of model and ?A is the agent of ?S and ?M is the patient of ?S",
    "completion": "(exists (?A ?S ?M) (and (instance ?A Artist) (instance ?S Sketching) (instance ?M Model) (agent ?S ?A) (patient ?S ?M)))"
  },
  {
    "prompt": "Exists ?M-1, ?C, ?S such that ?M-1 is an instance of musician and ?C is an instance of composing and ?S is an instance of song and ?M-1 is the agent of ?C and ?S is the patient of ?C",
    "completion": "(exists (?M-1 ?C ?S) (and (instance ?M-1 Musician) (instance ?C Composing) (instance ?S Song) (agent ?C ?M-1) (patient ?C ?S)))"
  },
  {
    "prompt": "Exists ?B-1, ?M, ?H such that ?B-1 is an instance of bee and ?M is an instance of making and ?H is an instance of honey and ?B-1 is the agent of ?M and ?H is the patient of ?M",
    "completion": "(exists (?B-1 ?M ?H) (and (instance ?B-1 Bee) (instance ?M Making) (instance ?H Honey) (agent ?M ?B-1) (patient ?M ?H)))"
  },
  {
    "prompt": "Exists ?R-1, ?E, ?R-2 such that ?R-1 is an instance of river and ?E is an instance of eroding and ?R-2 is an instance of rock and ?R-1 is the agent of ?E and ?R-2 is the patient of ?E",
    "completion": "(exists (?R-1 ?E ?R-2) (and (instance ?R-1 River) (instance ?E Eroding) (instance ?R-2 Rock) (agent ?E ?R-1) (patient ?E ?R-2)))"
  },
  {
    "prompt": "Exists ?M, ?L, ?B such that ?M is an instance of mason and ?L is an instance of laying and ?B is an instance of brick and ?M is the agent of ?L and ?B is the patient of ?L",
    "completion": "(exists (?M ?L ?B) (and (instance ?M Mason) (instance ?L Laying) (instance ?B Brick) (agent ?L ?M) (patient ?L ?B)))"
  },
  {
    "prompt": "Exists ?A, ?W, ?B such that ?A is an instance of author and ?W is an instance of writing and ?B is an instance of book and ?A is the agent of ?W and ?B is the patient of ?W",
    "completion": "(exists (?A ?W ?B) (and (instance ?A Author) (instance ?W Writing) (instance ?B Book) (agent ?W ?A) (patient ?W ?B)))"
  },
  {
    "prompt": "Exists ?J-1, ?C, ?J-2 such that ?J-1 is an instance of jeweler and ?C is an instance of crafting and ?J-2 is an instance of jewelry and ?J-1 is the agent of ?C and ?J-2 is the patient of ?C",
    "completion": "(exists (?J-1 ?C ?J-2) (and (instance ?J-1 Jeweler) (instance ?C Crafting) (instance ?J-2 Jewelry) (agent ?C ?J-1) (patient ?C ?J-2)))"
  },
  {
    "prompt": "Exists ?S, ?S-1, ?P such that ?S is an instance of snake and ?S-1 is an instance of swallowing and ?P is an instance of prey and ?S is the agent of ?S-1 and ?P is the patient of ?S-1",
    "completion": "(exists (?S ?S-1 ?P) (and (instance ?S Snake) (instance ?S-1 Swallowing) (instance ?P Prey) (agent ?S-1 ?S) (patient ?S-1 ?P)))"
  },
  {
    "prompt": "Exists ?T, ?P, ?O such that ?T is an instance of tree and ?P is an instance of producing and ?O is an instance of oxygen and ?T is the agent of ?P and ?O is the patient of ?P",
    "completion": "(exists (?T ?P ?O) (and (instance ?T Tree) (instance ?P Producing) (instance ?O Oxygen) (agent ?P ?T) (patient ?P ?O)))"
  },
  {
    "prompt": "Exists ?H, ?H-1, ?N such that ?H is an instance of hammer and ?H-1 is an instance of hitting and ?N is an instance of nail and ?H is the agent of ?H-1 and ?N is the patient of ?H-1",
    "completion": "(exists (?H ?H-1 ?N) (and (instance ?H Hammer) (instance ?H-1 Hitting) (instance ?N Nail) (agent ?H-1 ?H) (patient ?H-1 ?N)))"
  },
  {
    "prompt": "Exists ?F, ?H, ?C such that ?F is an instance of farmer and ?H is an instance of harvesting and ?C is an instance of crop and ?F is the agent of ?H and ?C is the patient of ?H",
    "completion": "(exists (?F ?H ?C) (and (instance ?F Farmer) (instance ?H Harvesting) (instance ?C Crop) (agent ?H ?F) (patient ?H ?C)))"
  },
  {
    "prompt": "Exists ?S, ?H, ?E such that ?S is an instance of sun and ?H is an instance of heating and ?E is an instance of earth and ?S is the agent of ?H and ?E is the patient of ?H",
    "completion": "(exists (?S ?H ?E) (and (instance ?S Sun) (instance ?H Heating) (instance ?E Earth) (agent ?H ?S) (patient ?H ?E)))"
  },
  {
    "prompt": "Exists ?R, ?W, ?P such that ?R is an instance of rain and ?W is an instance of watering and ?P is an instance of plant and ?R is the agent of ?W and ?P is the patient of ?W",
    "completion": "(exists (?R ?W ?P) (and (instance ?R Rain) (instance ?W Watering) (instance ?P Plant) (agent ?W ?R) (patient ?W ?P)))"
  },
  {
    "prompt": "Exists ?B, ?C, ?I such that ?B is an instance of bat and ?C is an instance of catching and ?I is an instance of insect and ?B is the agent of ?C and ?I is the patient of ?C",
    "completion": "(exists (?B ?C ?I) (and (instance ?B Bat) (instance ?C Catching) (instance ?I Insect) (agent ?C ?B) (patient ?C ?I)))"
  },
  {
    "prompt": "Exists ?V, ?E, ?L such that ?V is an instance of volcano and ?E is an instance of erupting and ?L is an instance of lava and ?V is the agent of ?E and ?L is the patient of ?E",
    "completion": "(exists (?V ?E ?L) (and (instance ?V Volcano) (instance ?E Erupting) (instance ?L Lava) (agent ?E ?V) (patient ?E ?L)))"
  },
  {
    "prompt": "Exists ?W, ?M, ?C such that ?W is an instance of wind and ?M is an instance of moving and ?C is an instance of cloud and ?W is the agent of ?M and ?C is the patient of ?M",
    "completion": "(exists (?W ?M ?C) (and (instance ?W Wind) (instance ?M Moving) (instance ?C Cloud) (agent ?M ?W) (patient ?M ?C)))"
  },
  {
    "prompt": "Exists ?L, ?H, ?Z such that ?L is an instance of lion and ?H is an instance of hunting and ?Z is an instance of zebra and ?L is the agent of ?H and ?Z is the patient of ?H",
    "completion": "(exists (?L ?H ?Z) (and (instance ?L Lion) (instance ?H Hunting) (instance ?Z Zebra) (agent ?H ?L) (patient ?H ?Z)))"
  },
  {
    "prompt": "Exists ?C-1, ?C-2, ?I such that ?C-1 is an instance of camera and ?C-2 is an instance of capturing and ?I is an instance of image and ?C-1 is the agent of ?C-2 and ?I is the patient of ?C-2",
    "completion": "(exists (?C-1 ?C-2 ?I) (and (instance ?C-1 Camera) (instance ?C-2 Capturing) (instance ?I Image) (agent ?C-2 ?C-1) (patient ?C-2 ?I)))"
  },
  {
    "prompt": "Exists ?P1, ?A, ?P2 such that ?P1 is an instance of person and ?A is an instance of growing and ?P2 is an instance of plant and ?P1 is the agent of ?A and ?P2 is the patient of ?A.",
    "completion": "(exists (?P1 ?A ?P2) (and (instance ?P1 Person) (instance ?A Growing) (instance ?P2 Plant) (agent ?A ?P1) (patient ?A ?P2)))"
  },
  {
    "prompt": "Exists ?A, ?D, ?B such that ?A is an instance of architect and ?D is an instance of designing and ?B is an instance of building and ?A is the agent of ?D and ?B is the patient of ?D.",
    "completion": "(exists (?A ?D ?B) (and (instance ?A Architect) (instance ?D Designing) (instance ?B Building) (agent ?D ?A) (patient ?D ?B)))"
  },
  {
    "prompt": "Exists ?B, ?P, ?F such that ?B is an instance of bee and ?P is an instance of pollinating and ?F is an instance of flower and ?B is the agent of ?P and ?F is the patient of ?P.",
    "completion": "(exists (?B ?P ?F) (and (instance ?B Bee) (instance ?P Pollinating) (instance ?F Flower) (agent ?P ?B) (patient ?P ?F)))"
  },
  {
    "prompt": "Exists ?W, ?C, ?N such that ?W is an instance of writer and ?C is an instance of creating and ?N is an instance of novel and ?W is the agent of ?C and ?N is the patient of ?C.",
    "completion": "(exists (?W ?C ?N) (and (instance ?W Writer) (instance ?C Creating) (instance ?N Novel) (agent ?C ?W) (patient ?C ?N)))"
  },
  {
    "prompt": "Exists ?E, ?D, ?S such that ?E is an instance of engineer and ?D is an instance of developing and ?S is an instance of software and ?E is the agent of ?D and ?S is the patient of ?D.",
    "completion": "(exists (?E ?D ?S) (and (instance ?E Engineer) (instance ?D Developing) (instance ?S Software) (agent ?D ?E) (patient ?D ?S)))"
  },
  {
    "prompt": "Exists ?A, ?P1, ?P2 such that ?A is an instance of artist and ?P1 is an instance of painting and ?P2 is an instance of portrait and ?A is the agent of ?P1 and ?P2 is the patient of ?P1.",
    "completion": "(exists (?A ?P1 ?P2) (and (instance ?A Artist) (instance ?P1 Painting) (instance ?P2 Portrait) (agent ?P1 ?A) (patient ?P1 ?P2)))"
  },
  {
    "prompt": "Exists ?R, ?S, ?P such that ?R is an instance of researcher and ?S is an instance of studying and ?P is an instance of phenomenon and ?R is the agent of ?S and ?P is the patient of ?S.",
    "completion": "(exists (?R ?S ?P) (and (instance ?R Researcher) (instance ?S Studying) (instance ?P Phenomenon) (agent ?S ?R) (patient ?S ?P)))"
  },
  {
    "prompt": "Exists ?C, ?B1, ?B2 such that ?C is an instance of chef and ?B1 is an instance of baking and ?B2 is an instance of bread and ?C is the agent of ?B1 and ?B2 is the patient of ?B1.",
    "completion": "(exists (?C ?B1 ?B2) (and (instance ?C Chef) (instance ?B1 Baking) (instance ?B2 Bread) (agent ?B1 ?C) (patient ?B1 ?B2)))"
  },
  {
    "prompt": "Exists ?S, ?D, ?P such that ?S is an instance of scientist and ?D is an instance of discovering and ?P is an instance of planet and ?S is the agent of ?D and ?P is the patient of ?D.",
    "completion": "(exists (?S ?D ?P) (and (instance ?S Scientist) (instance ?D Discovering) (instance ?P Planet) (agent ?D ?S) (patient ?D ?P)))"
  },
  {
    "prompt": "Exists ?C, ?B, ?F such that ?C is an instance of carpenter and ?B is an instance of building and ?F is an instance of furniture and ?C is the agent of ?B and ?F is the patient of ?B.",
    "completion": "(exists (?C ?B ?F) (and (instance ?C Carpenter) (instance ?B Building) (instance ?F Furniture) (agent ?B ?C) (patient ?B ?F)))"
  },
  {
    "prompt": "Exists ?D, ?S, ?C such that ?D is an instance of detective and ?S is an instance of solving and ?C is an instance of case and ?D is the agent of ?S and ?C is the patient of ?S.",
    "completion": "(exists (?D ?S ?C) (and (instance ?D Detective) (instance ?S Solving) (instance ?C Case) (agent ?S ?D) (patient ?S ?C)))"
  },
  {
    "prompt": "Exists ?F, ?P, ?S such that ?F is an instance of farmer and ?P is an instance of planting and ?S is an instance of seed and ?F is the agent of ?P and ?S is the patient of ?P.",
    "completion": "(exists (?F ?P ?S) (and (instance ?F Farmer) (instance ?P Planting) (instance ?S Seed) (agent ?P ?F) (patient ?P ?S)))"
  },
  {
    "prompt": "Exists ?S1, ?P, ?S2 such that ?S1 is an instance of singer and ?P is an instance of performing and ?S2 is an instance of song and ?S1 is the agent of ?P and ?S2 is the patient of ?P.",
    "completion": "(exists (?S1 ?P ?S2) (and (instance ?S1 Singer) (instance ?P Performing) (instance ?S2 Song) (agent ?P ?S1) (patient ?P ?S2)))"
  },
  {
    "prompt": "Exists ?W, ?P, ?B such that ?W is an instance of writer and ?P is an instance of publishing and ?B is an instance of book and ?W is the agent of ?P and ?B is the patient of ?P.",
    "completion": "(exists (?W ?P ?B) (and (instance ?W Writer) (instance ?P Publishing) (instance ?B Book) (agent ?P ?W) (patient ?P ?B)))"
  },
  {
    "prompt": "Exists ?M, ?F, ?C such that ?M is an instance of mechanic and ?F is an instance of fixing and ?C is an instance of car and ?M is the agent of ?F and ?C is the patient of ?F.",
    "completion": "(exists (?M ?F ?C) (and (instance ?M Mechanic) (instance ?F Fixing) (instance ?C Car) (agent ?F ?M) (patient ?F ?C)))"
  },
  {
    "prompt": "Exists ?P, ?C, ?W such that ?P is an instance of painter and ?C is an instance of coloring and ?W is an instance of wall and ?P is the agent of ?C and ?W is the patient of ?C.",
    "completion": "(exists (?P ?C ?W) (and (instance ?P Painter) (instance ?C Coloring) (instance ?W Wall) (agent ?C ?P) (patient ?C ?W)))"
  },
  {
    "prompt": "Exists ?P, ?C, ?A such that ?P is an instance of programmer and ?C is an instance of coding and ?A is an instance of application and ?P is the agent of ?C and ?A is the patient of ?C.",
    "completion": "(exists (?P ?C ?A) (and (instance ?P Programmer) (instance ?C Coding) (instance ?A Application) (agent ?C ?P) (patient ?C ?A)))"
  },
  {
    "prompt": "If ?P is an instance of plant, then there exists ?A such that ?A is an instance of absorbing, and ?P is the agent of ?A and carbon dioxide is the patient of ?A.",
    "completion": "(=> (instance ?P Plant) (exists (?A) (and (instance ?A Absorbing) (agent ?A ?P) (patient ?A CarbonDioxide))))"
  },
  {
    "prompt": "If ?B is an instance of bee, then there exists ?P such that ?P is an instance of pollinating, and ?B is the agent of ?P and flower is the patient of ?P.",
    "completion": "(=> (instance ?B Bee) (exists (?P) (and (instance ?P Pollinating) (agent ?P ?B) (patient ?P Flower))))"
  },
  {
    "prompt": "If ?E is an instance of engine, then there exists ?C such that ?C is an instance of consuming, and ?E is the agent of ?C and oil is the patient of ?C.",
    "completion": "(=> (instance ?E Engine) (exists (?C) (and (instance ?C Consuming) (agent ?C ?E) (patient ?C Oil))))"
  },
  {
    "prompt": "If ?R is an instance of river, then there exists ?F such that ?F is an instance of flowing, and ?R is the agent of ?F and sea is the patient of ?F.",
    "completion": "(=> (instance ?R River) (exists (?F) (and (instance ?F Flowing) (agent ?F ?R) (patient ?F Sea))))"
  },
  {
    "prompt": "If ?T is an instance of teacher, then there exists ?E such that ?E is an instance of educating, and ?T is the agent of ?E and student is the patient of ?E.",
    "completion": "(=> (instance ?T Teacher) (exists (?E) (and (instance ?E Educating) (agent ?E ?T) (patient ?E Student))))"
  },
  {
    "prompt": "If ?C is an instance of cow, then there exists ?P such that ?P is an instance of producing, and ?C is the agent of ?P and milk is the patient of ?P.",
    "completion": "(=> (instance ?C Cow) (exists (?P) (and (instance ?P Producing) (agent ?P ?C) (patient ?P Milk))))"
  },
  {
    "prompt": "If ?W is an instance of windmill, then there exists ?G such that ?G is an instance of generating, and ?W is the agent of ?G and electricity is the patient of ?G.",
    "completion": "(=> (instance ?W Windmill) (exists (?G) (and (instance ?G Generating) (agent ?G ?W) (patient ?G Electricity))))"
  },
  {
    "prompt": "If ?B is an instance of baker, then there exists ?Bk such that ?Bk is an instance of baking, and ?B is the agent of ?Bk and bread is the patient of ?Bk.",
    "completion": "(=> (instance ?B Baker) (exists (?Bk) (and (instance ?Bk Baking) (agent ?Bk ?B) (patient ?Bk Bread))))"
  },
  {
    "prompt": "If ?P is an instance of photographer, then there exists ?T such that ?T is an instance of taking, and ?P is the agent of ?T and photo is the patient of ?T.",
    "completion": "(=> (instance ?P Photographer) (exists (?T) (and (instance ?T Taking) (agent ?T ?P) (patient ?T Photo))))"
  },
  {
    "prompt": "If ?F is an instance of fire, then there exists ?B such that ?B is an instance of burning, and ?F is the agent of ?B and wood is the patient of ?B.",
    "completion": "(=> (instance ?F Fire) (exists (?B) (and (instance ?B Burning) (agent ?B ?F) (patient ?B Wood))))"
  },
  {
    "prompt": "If ?W is an instance of wave, then there exists ?C such that ?C is an instance of crashing, and ?W is the agent of ?C and the rock is the patient of ?C.",
    "completion": "(=> (instance ?W Wave) (exists (?C) (and (instance ?C Crashing) (agent ?C ?W) (patient ?C Rock))))"
  },
  {
    "prompt": "If ?R is an instance of raindrop, then there exists ?W such that ?W is an instance of wetting, and ?R is the agent of ?W and the ground is the patient of ?W.",
    "completion": "(=> (instance ?R Raindrop) (exists (?W) (and (instance ?W Wetting) (agent ?W ?R) (patient ?W Ground))))"
  },
  {
    "prompt": "If ?T is an instance of time, then there exists ?C such that ?C is an instance of changing, and ?T is the agent of ?C and season is the patient of ?C.",
    "completion": "(=> (instance ?T Time) (exists (?C) (and (instance ?C Changing) (agent ?C ?T) (patient ?C Season))))"
  },
  {
    "prompt": "If ?W is an instance of wind, then there exists ?E such that ?E is an instance of eroding, and ?W is the agent of ?E and rock is the patient of ?E.",
    "completion": "(=> (instance ?W Wind) (exists (?E) (and (instance ?E Eroding) (agent ?E ?W) (patient ?E Rock))))"
  },
  {
    "prompt": "If ?F is an instance of fire, then there exists ?M such that ?M is an instance of melting, and ?F is the agent of ?M and metal is the patient of ?M.",
    "completion": "(=> (instance ?F Fire) (exists (?M) (and (instance ?M Melting) (agent ?M ?F) (patient ?M Metal))))"
  },
  {
    "prompt": "If ?S is an instance of sunlight, then there exists ?N such that ?N is an instance of nourishing, and ?S is the agent of ?N and plant is the patient of ?N.",
    "completion": "(=> (instance ?S Sunlight) (exists (?N) (and (instance ?N Nourishing) (agent ?N ?S) (patient ?N Plant))))"
  },
  {
    "prompt": "If ?E is an instance of exercise, then there exists ?S such that ?S is an instance of strengthening, and ?E is the agent of ?S and muscle is the patient of ?S.",
    "completion": "(=> (instance ?E Exercise) (exists (?S) (and (instance ?S Strengthening) (agent ?S ?E) (patient ?S Muscle))))"
  },
  {
    "prompt": "If ?F is an instance of fire, then there exists ?B such that ?B is an instance of burning, and ?F is the agent of ?B and fuel is the patient of ?B.",
    "completion": "(=> (instance ?F Fire) (exists (?B) (and (instance ?B Burning) (agent ?B ?F) (patient ?B Fuel))))"
  },
  {
    "prompt": "If ?W is an instance of wind, then there exists ?D such that ?D is an instance of drying, and ?W is the agent of ?D and clothes is the patient of ?D.",
    "completion": "(=> (instance ?W Wind) (exists (?D) (and (instance ?D Drying) (agent ?D ?W) (patient ?D Clothes))))"
  },
  {
    "prompt": "If ?R is an instance of rain, then there exists ?W such that ?W is an instance of watering, and ?R is the agent of ?W and plants is the patient of ?W.",
    "completion": "(=> (instance ?R Rain) (exists (?W) (and (instance ?W Watering) (agent ?W ?R) (patient ?W Plants))))"
  },
  {
    "prompt": "Exists ?A, ?B such that ?A is an instance of athlete, ?B is an instance of breaking, and ?A is the agent of ?B and Record is the patient of ?B.",
    "completion": "(exists (?A ?B) (and (instance ?A Athlete) (instance ?B Breaking) (agent ?B ?A) (patient ?B Record)))"
  },
  {
    "prompt": "Exists ?C, ?M such that ?C is an instance of comedian, ?M is an instance of making, and ?C is the agent of ?M and Person is the patient of ?M.",
    "completion": "(exists (?C ?M) (and (instance ?C Comedian) (instance ?M Making) (agent ?M ?C) (patient ?M Person)))"
  },
  {
    "prompt": "Exists ?M, ?I such that ?M is an instance of movie, ?I is an instance of inspiring, and ?M is the agent of ?I and Audience is the patient of ?I.",
    "completion": "(exists (?M ?I) (and (instance ?M Movie) (instance ?I Inspiring) (agent ?I ?M) (patient ?I Audience)))"
  },
  {
    "prompt": "Exists ?A, ?C such that ?A is an instance of artist, ?C is an instance of creating, and ?A is the agent of ?C and Masterpiece is the patient of ?C.",
    "completion": "(exists (?A ?C) (and (instance ?A Artist) (instance ?C Creating) (agent ?C ?A) (patient ?C Masterpiece)))"
  },
  {
    "prompt": "Exists ?M, ?P such that ?M is an instance of musician, ?P is an instance of playing, and ?M is the agent of ?P and Instrument is the patient of ?P.",
    "completion": "(exists (?M ?P) (and (instance ?M Musician) (instance ?P Playing) (agent ?P ?M) (patient ?P Instrument)))"
  },
  {
    "prompt": "Exists ?S, ?P such that ?S is an instance of student, ?P is an instance of solving, and ?S is the agent of ?P and difficult problem is the patient of ?P.",
    "completion": "(exists (?S ?P) (and (instance ?S Student) (instance ?P Solving) (agent ?P ?S) (patient ?P DifficultProblem)))"
  },
  {
    "prompt": "Exists ?D, ?T such that ?D is an instance of doctor, ?T is an instance of treating, and ?D is the agent of ?T and patient is the patient of ?T.",
    "completion": "(exists (?D ?T) (and (instance ?D Doctor) (instance ?T Treating) (agent ?T ?D) (patient ?T Patient)))"
  },
  {
    "prompt": "Exists ?C, ?M such that ?C is an instance of chef, ?M is an instance of cooking, and ?C is the agent of ?M and delicious meal is the patient of ?M.",
    "completion": "(exists (?C ?M) (and (instance ?C Chef) (instance ?M Cooking) (agent ?M ?C) (patient ?M DeliciousMeal)))"
  },
  {
    "prompt": "Exists ?W, ?C such that ?W is an instance of writer, ?C is an instance of creating, and ?W is the agent of ?C and captivating story is the patient of ?C.",
    "completion": "(exists (?W ?C) (and (instance ?W Writer) (instance ?C Creating) (agent ?C ?W) (patient ?C CaptivatingStory)))"
  },
  {
    "prompt": "Exists ?T, ?I such that ?T is an instance of teacher, ?I is an instance of inspiring, and ?T is the agent of ?I and student is the patient of ?I.",
    "completion": "(exists (?T ?I) (and (instance ?T Teacher) (instance ?I Inspiring) (agent ?I ?T) (patient ?I Student)))"
  },
  {
    "prompt": "Exists ?M, ?C such that ?M is an instance of musician, ?C is an instance of composing, and ?M is the agent of ?C and beautiful melody is the patient of ?C.",
    "completion": "(exists (?M ?C) (and (instance ?M Musician) (instance ?C Composing) (agent ?C ?M) (patient ?C BeautifulMelody)))"
  },
  {
    "prompt": "Exists ?S, ?C such that ?S is an instance of scientist, ?C is an instance of conducting, and ?S is the agent of ?C and experiment is the patient of ?C.",
    "completion": "(exists (?S ?C) (and (instance ?S Scientist) (instance ?C Conducting) (agent ?C ?S) (patient ?C Experiment)))"
  },
  {
    "prompt": "Exists ?L, ?D such that ?L is an instance of lawyer, ?D is an instance of defending, and ?L is the agent of ?D and client is the patient of ?D.",
    "completion": "(exists (?L ?D) (and (instance ?L Lawyer) (instance ?D Defending) (agent ?D ?L) (patient ?D Client)))"
  },
  {
    "prompt": "Exists ?A, ?P such that ?A is an instance of artist, ?P is an instance of painting, and ?A is the agent of ?P and beautiful artwork is the patient of ?P.",
    "completion": "(exists (?A ?P) (and (instance ?A Artist) (instance ?P Painting) (agent ?P ?A) (patient ?P BeautifulArtwork)))"
  },
  {
    "prompt": "Exists ?A, ?W such that ?A is an instance of athlete, ?W is an instance of winning, and ?A is the agent of ?W and gold medal is the patient of ?W.",
    "completion": "(exists (?A ?W) (and (instance ?A Athlete) (instance ?W Winning) (agent ?W ?A) (patient ?W GoldMedal)))"
  },
  {
    "prompt": "Exists ?D, ?C such that ?D is an instance of detox diet, ?C is an instance of cleansing, and ?D is the agent of ?C and body is the patient of ?C.",
    "completion": "(exists (?D ?C) (and (instance ?D DetoxDiet) (instance ?C Cleansing) (agent ?C ?D) (patient ?C Body)))"
  },
  {
    "prompt": "Physical is a subclass of entity",
    "completion": "(subclass Physical Entity)"
  },
  {
    "prompt": "Object is a subclass of physical",
    "completion": "(subclass Object Physical)"
  },
  {
    "prompt": "Self-connected object is a subclass of object",
    "completion": "(subclass SelfConnectedObject Object)"
  },
  {
    "prompt": "Organic thing is a subclass of self-connected object",
    "completion": "(subclass OrganicThing SelfConnectedObject)"
  },
  {
    "prompt": "Organic object is a subclass of self-connected object",
    "completion": "(subclass OrganicObject SelfConnectedObject)"
  },
  {
    "prompt": "Organism is a subclass of organic object",
    "completion": "(subclass Organism OrganicObject)"
  },
  {
    "prompt": "Animal is a subclass of organism",
    "completion": "(subclass Animal Organism)"
  },
  {
    "prompt": "Vertebrate is a subclass of animal",
    "completion": "(subclass Vertebrate Animal)"
  },
  {
    "prompt": "Warm-blooded vertebrate is a subclass of vertebrate",
    "completion": "(subclass WarmBloodedVertebrate Vertebrate)"
  },
  {
    "prompt": "Bird is a subclass of warm-blooded vertebrate",
    "completion": "(subclass Bird WarmBloodedVertebrate)"
  },
  {
    "prompt": "Horse is a subclass of hoofed mammal",
    "completion": "(subclass Horse HoofedMammal)"
  },
  {
    "prompt": "Wine is a subclass of alcoholic beverage",
    "completion": "(subclass Wine AlcoholicBeverage)"
  },
  {
    "prompt": "Alcohol is a subclass of depressant",
    "completion": "(subclass AlcoholicBeverage Depressant)"
  },
  {
    "prompt": "Alcohol is a subclass of beverage",
    "completion": "(subclass AlcoholicBeverage Beverage)"
  },
  {
    "prompt": "Ingesting is a subclass of organism process",
    "completion": "(subclass Ingesting OrganismProcess)"
  },
  {
    "prompt": "Diet is a subclass of plan",
    "completion": "(subclass Diet Plan)"
  },
  {
    "prompt": "Coffee is a subclass of beverage",
    "completion": "(subclass Coffee Beverage)"
  },
  {
    "prompt": "Pizza is a subclass of food",
    "completion": "(subclass Pizza Food)"
  },
  {
    "prompt": "Car is a subclass of vehicle",
    "completion": "(subclass Car Vehicle)"
  },
  {
    "prompt": "Chair is a subclass of furniture",
    "completion": "(subclass Chair Furniture)"
  },
  {
    "prompt": "Cat is a subclass of mammal",
    "completion": "(subclass Cat Mammal)"
  },
  {
    "prompt": "Book is a subclass of written work",
    "completion": "(subclass Book WrittenWork)"
  },
  {
    "prompt": "Plane is a subclass of mode of transportation",
    "completion": "(subclass Plane ModeOfTransportation)"
  },
  {
    "prompt": "Cucumber is a subclass of vegetable",
    "completion": "(subclass Cucumber Vegetable)"
  },
  {
    "prompt": "Violin is a subclass of musical instrument",
    "completion": "(subclass Violin MusicalInstrument)"
  },
  {
    "prompt": "Table is a subclass of furniture",
    "completion": "(subclass Table Furniture)"
  },
  {
    "prompt": "Cat is a subclass of mammal",
    "completion": "(subclass Cat Mammal)"
  },
  {
    "prompt": "Book is a subclass of written work",
    "completion": "(subclass Book WrittenWork)"
  },
  {
    "prompt": "Chair is a subclass of furniture",
    "completion": "(subclass Chair Furniture)"
  },
  {
    "prompt": "Dog is a subclass of animal",
    "completion": "(subclass Dog Animal)"
  },
  {
    "prompt": "Apple is a subclass of fruit",
    "completion": "(subclass Apple Fruit)"
  },
  {
    "prompt": "Table is a subclass of furniture",
    "completion": "(subclass Table Furniture)"
  },
  {
    "prompt": "Bird is a subclass of animal",
    "completion": "(subclass Bird Animal)"
  },
  {
    "prompt": "Horse is a subclass of mammal",
    "completion": "(subclass Horse Mammal)"
  },
  {
    "prompt": "Vehicle is a subclass of transportation means",
    "completion": "(subclass Vehicle TransportationMeans)"
  },
  {
    "prompt": "Lion is a subclass of carnivorous animal",
    "completion": "(subclass Lion CarnivorousAnimal)"
  },
  {
    "prompt": "Detox diet is a subclass of diet",
    "completion": "(subclass DetoxDiet Diet)"
  },
  {
    "prompt": "Golden Retriever is a subclass of dog",
    "completion": "(subclass GoldenRetriever Dog)"
  },
  {
    "prompt": "Rose is a subclass of flower",
    "completion": "(subclass Rose Flower)"
  },
  {
    "prompt": "Oak is a subclass of tree",
    "completion": "(subclass Oak Tree)"
  },
  {
    "prompt": "Soccer is a subclass of sport",
    "completion": "(subclass Soccer Sport)"
  },
  {
    "prompt": "Hummingbird is a subclass of bird",
    "completion": "(subclass Hummingbird Bird)"
  },
  {
    "prompt": "Python is a subclass of programming language",
    "completion": "(subclass Python ProgrammingLanguage)"
  },
  {
    "prompt": "SUV is a subclass of vehicle",
    "completion": "(subclass SUV Vehicle)"
  },
  {
    "prompt": "Pop music is a subclass of music genre",
    "completion": "(subclass PopMusic MusicGenre)"
  },
  {
    "prompt": "Lion is a subclass of big cat",
    "completion": "(subclass Lion BigCat)"
  },
  {
    "prompt": "Hiking is a subclass of outdoor activity",
    "completion": "(subclass Hiking OutdoorActivity)"
  },
  {
    "prompt": "Cat is a subclass of pet",
    "completion": "(subclass Cat Pet)"
  },
  {
    "prompt": "Rose is a subclass of flower",
    "completion": "(subclass Rose Flower)"
  },
  {
    "prompt": "Lion is a subclass of big cat",
    "completion": "(subclass Lion BigCat)"
  },
  {
    "prompt": "Chair is a subclass of furniture",
    "completion": "(subclass Chair Furniture)"
  },
  {
    "prompt": "Dog is a subclass of animal",
    "completion": "(subclass Dog Animal)"
  },
  {
    "prompt": "Book is a subclass of written work",
    "completion": "(subclass Book WrittenWork)"
  },
  {
    "prompt": "Table is a subclass of furniture",
    "completion": "(subclass Table Furniture)"
  },
  {
    "prompt": "Bird is a subclass of animal",
    "completion": "(subclass Bird Animal)"
  },
  {
    "prompt": "Horse is a subclass of mammal",
    "completion": "(subclass Horse Mammal)"
  },
  {
    "prompt": "Car is a subclass of vehicle",
    "completion": "(subclass Car Vehicle)"
  },
  {
    "prompt": "Alcoholic beverages and fruit juices are subclasses of beverage",
    "completion": "(and (subclass AlcoholicBeverage Beverage) (subclass FruitJuice Beverage))"
  },
  {
    "prompt": "Lion and tiger are subclasses of feline",
    "completion": "(and (subclass Lion Feline) (subclass Tiger Feline))"
  },
  {
    "prompt": "Oak and maple are subclasses of tree",
    "completion": "(and (subclass Oak Tree) (subclass Maple Tree))"
  },
  {
    "prompt": "Sparrow and eagle are subclasses of bird",
    "completion": "(and (subclass Sparrow Bird) (subclass Eagle Bird))"
  },
  {
    "prompt": "Tulip and rose are subclasses of flower",
    "completion": "(and (subclass Tulip Flower) (subclass Rose Flower))"
  },
  {
    "prompt": "Whale and dolphin are subclasses of mammal",
    "completion": "(and (subclass Whale Mammal) (subclass Dolphin Mammal))"
  },
  {
    "prompt": "Frog and lizard are subclasses of reptile",
    "completion": "(and (subclass Frog Reptile) (subclass Lizard Reptile))"
  },
  {
    "prompt": "Trout and salmon are subclasses of fish",
    "completion": "(and (subclass Trout Fish) (subclass Salmon Fish))"
  },
  {
    "prompt": "Cucumber and pumpkin are subclasses of vegetable",
    "completion": "(and (subclass Cucumber Vegetable) (subclass Pumpkin Vegetable))"
  },
  {
    "prompt": "Apple and banana are subclasses of fruit",
    "completion": "(and (subclass Apple Fruit) (subclass Banana Fruit))"
  },
  {
    "prompt": "Square is a subclass of rectangle and polygon",
    "completion": "(and (subclass Square Rectangle) (subclass Square Polygon))"
  },
  {
    "prompt": "Rose is a subclass of flower and plant",
    "completion": "(and (subclass Rose Flower) (subclass Rose Plant))"
  },
  {
    "prompt": "Lion is a subclass of mammal and carnivore",
    "completion": "(and (subclass Lion Mammal) (subclass Lion Carnivore))"
  },
  {
    "prompt": "Shark is a subclass of fish and predator",
    "completion": "(and (subclass Shark Fish) (subclass Shark Predator))"
  },
  {
    "prompt": "Violin is a subclass of musical instrument and string instrument",
    "completion": "(and (subclass Violin MusicalInstrument) (subclass Violin StringInstrument))"
  },
  {
    "prompt": "Frog is a subclass of amphibian and vertebrate",
    "completion": "(and (subclass Frog Amphibian) (subclass Frog Vertebrate))"
  },
  {
    "prompt": "Robin is a subclass of bird and animal",
    "completion": "(and (subclass Robin Bird) (subclass Robin Animal))"
  },
  {
    "prompt": "Mushroom is a subclass of fungus and organism",
    "completion": "(and (subclass Mushroom Fungus) (subclass Mushroom Organism))"
  },
  {
    "prompt": "Helicopter is a subclass of vehicle and aircraft",
    "completion": "(and (subclass Helicopter Vehicle) (subclass Helicopter Aircraft))"
  },
  {
    "prompt": "Pineapple is a subclass of fruit and plant",
    "completion": "(and (subclass Pineapple Fruit) (subclass Pineapple Plant))"
  }
]